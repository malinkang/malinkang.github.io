<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on 人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。</title>
    <link>https://malinkang.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on 人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Sep 2018 12:26:55 +0000</lastBuildDate><atom:link href="https://malinkang.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《Kotlin实战》读书笔记 第8章 Lambda作为形参和返回值</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter8/</link>
      <pubDate>Wed, 12 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter8/</guid>
      <description>8.1 声明高阶函数 高阶函数就是以另一个函数作为参数或者返回值的函数。 8.1.1 函数类型 1 2 3 4 5 6 7 8 val sum = { x: Int, y: Int -&amp;gt; x + y } val action = { println(42)} run { println(sum(1,2)) //3 } run{ action()</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第7章 运算符重载及其他约定</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter7/</link>
      <pubDate>Sun, 09 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter7/</guid>
      <description>7.1 重载算术运算符 7.1.1 重载二元算术运算 1 2 3 4 5 6 7 8 data class Point(val x: Int, val y: Int) { operator fun plus(other: Point): Point { return Point(x + other.x, y + other.y) } } val p1 = Point(10, 20) val p2 = Point(30, 40) println(p1 + p2) //Point(x=40, y=60) 1 2 3 operator fun Point.plus(other:</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第6章 Kotlin的类型系统</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter6/</link>
      <pubDate>Thu, 06 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter6/</guid>
      <description>6.1 可空性 6.1.1 可空类型 1 2 //增加了null检查后，这段代码就可以编译了 fun strLenSafe(s: String?) = if (s != null) s.length else 0 6.1.2 类型的含义 6.1.3 安全调用运算符 安全调用运算符?允许把</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第5章 Lambda编程</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter5/</link>
      <pubDate>Tue, 04 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter5/</guid>
      <description>5.1 Lambda表达式和成员引用 5.1.1 Lambda简介：作为函数参数的代码块 1 2 3 4 5 6 button.setOnClickLisener(new OnClickListener(){ @Override public void onClick(View view){ //点击后执行的动作 } } 1 button.se</description>
    </item>
    
    <item>
      <title>《Java编程思想》第11章持有对象</title>
      <link>https://malinkang.cn/post/thinking-in-java-holding-your-objects/</link>
      <pubDate>Tue, 21 May 2013 13:39:36 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/thinking-in-java-holding-your-objects/</guid>
      <description>第11章 持有对象 1.泛型和类型安全的容器 Apple和Orange都放置在了容器中，然后将它们取出。正常情况下，Java编译器会报告警告信息，</description>
    </item>
    
  </channel>
</rss>
