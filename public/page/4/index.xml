<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malinkang‘s Blog</title>
    <link>https://malinkang.cn/</link>
    <description>Recent content on Malinkang‘s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Wed, 09 Apr 2014 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://malinkang.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>安装Flutter</title>
        <link>https://malinkang.cn/posts/flutter-install/</link>
        <pubDate>Tue, 18 Dec 2018 13:37:22 +0800</pubDate>
        
        <guid>https://malinkang.cn/posts/flutter-install/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/posts/flutter-install/ -&lt;h2 id=&#34;1安装sdk&#34;&gt;1.安装SDK&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://flutter.dev/docs/development/tools/sdk/releases#macos&#34;&gt;官网&lt;/a&gt;下载其最新可用的安装包并解压。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;code&gt;.bash_profile&lt;/code&gt;文件中写入&lt;code&gt;export PATH=/Users/malk/Documents/flutter/bin:$PATH&lt;/code&gt;，然后保存并执行&lt;code&gt;source .bash_profile&lt;/code&gt;。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;运行&lt;code&gt;flutter doctor&lt;/code&gt;命令查看是否需要安装其它依赖项来完成安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该命令检查您的环境并在终端窗口中显示报告。&lt;code&gt;Dart SDK&lt;/code&gt;已经在捆绑在&lt;code&gt;Flutter&lt;/code&gt;里了，没有必要单独安装Dart。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malinkang.cn/images/flutter-doctor-command-line.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2配置android-studio&#34;&gt;2.配置Android Studio&lt;/h2&gt;
&lt;p&gt;需要安装两个插件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flutter插件： 支持Flutter开发工作流 (运行、调试、热重载等).&lt;/li&gt;
&lt;li&gt;Dart插件： 提供代码分析 (输入代码时进行验证、代码补全等).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3创建-flutter-project&#34;&gt;3.创建 Flutter Project&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;选择 File&amp;gt;New Flutter Project&lt;/li&gt;
&lt;li&gt;选择 Flutter application 作为 project 类型, 然后点击 Next&lt;/li&gt;
&lt;li&gt;输入项目名称 (如 myapp), 然后点击 Next&lt;/li&gt;
&lt;li&gt;点击 Finish&lt;/li&gt;
&lt;li&gt;等待Android Studio安装SDK并创建项目.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4运行项目&#34;&gt;4.运行项目&lt;/h2&gt;
&lt;p&gt;可以通过点击Android Studio的run按钮来运行。也可以通过flutter命令来运行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;flutter devices //查看连接设备
flutter run //运行项目
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/49222658/device-list-doesnt-shows-in-android-studio-using-flutter&#34;&gt;Flutter配置好后在Android Studio中找不到设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/51679269/waiting-for-another-flutter-command-to-release-the-startup-lock&#34;&gt;Waiting for another flutter command to release the startup lock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://malinkang.cn/posts/flutter-install/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>《Kotlin实战》读书笔记 第8章 Lambda作为形参和返回值</title>
        <link>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter8/</link>
        <pubDate>Wed, 12 Sep 2018 12:26:55 +0000</pubDate>
        
        <guid>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter8/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter8/ -&lt;h2 id=&#34;81-声明高阶函数&#34;&gt;8.1 声明高阶函数&lt;/h2&gt;
&lt;p&gt;高阶函数就是以另一个函数作为参数或者返回值的函数。&lt;/p&gt;
&lt;h3 id=&#34;811-函数类型&#34;&gt;8.1.1 函数类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image%20%286%29.png&#34; alt=&#34;Kotlin&amp;#x4E2D;&amp;#x51FD;&amp;#x6570;&amp;#x7C7B;&amp;#x578B;&amp;#x8BED;&amp;#x6CD5;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; sum = { x: Int, y: Int -&amp;gt; x + y }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; action = { println(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)}
    run {
        println(sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    run{
        action() &lt;span style=&#34;color:#75715e&#34;&gt;//42
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; sum: (Int, Int) -&amp;gt; Int = { x, y -&amp;gt; x + y } &lt;span style=&#34;color:#75715e&#34;&gt;// 有两个Int型参数和Int型返回值的函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; action: () -&amp;gt; Unit = { println(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) } &lt;span style=&#34;color:#75715e&#34;&gt;//没有参数和返回值的函数
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;812-调用作为参数的函数&#34;&gt;8.1.2 调用作为参数的函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoAndThree&lt;/span&gt;(operation: (Int, Int) -&amp;gt; Int) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = operation(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The result is $result&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;twoAndThree { a, b -&amp;gt; a + b } &lt;span style=&#34;color:#75715e&#34;&gt;//The result is 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;twoAndThree { a, b -&amp;gt; a * b } &lt;span style=&#34;color:#75715e&#34;&gt;//The result is 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;813-在java中使用函数类&#34;&gt;8.1.3 在Java中使用函数类&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;LambdaTestKt.twoAndThree((a, b) -&amp;gt; a + b); &lt;span style=&#34;color:#75715e&#34;&gt;//The result is 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;LambdaTestKt.twoAndThree((a, b) -&amp;gt; a * b); &lt;span style=&#34;color:#75715e&#34;&gt;//The result is 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;814-函数类型的参数默认值和null值&#34;&gt;8.1.4 函数类型的参数默认值和null值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Collection&lt;/span&gt;&amp;lt;T&amp;gt;.joinToString(separator: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                                   prefix: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                                   postfix: String,
                                   transform: (T) -&amp;gt; String = { it.toString() }): String {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = StringBuilder(prefix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ((index, element) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; withIndex()) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (index &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) result.append(separator)
        result.append(transform(element))
    }
    result.append(postfix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result.toString()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; letters = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alpha&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beta&amp;#34;&lt;/span&gt;)
println(letters.joinToString()) &lt;span style=&#34;color:#75715e&#34;&gt;//Alpha, Beta
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(letters.joinToString(transform = String&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;toLowerCase)) &lt;span style=&#34;color:#75715e&#34;&gt;//alpha, beta
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(letters.joinToString(separator = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;! &amp;#34;&lt;/span&gt;, postfix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;! &amp;#34;&lt;/span&gt;, transform = String&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;toUpperCase)) &lt;span style=&#34;color:#75715e&#34;&gt;//ALPHA! BETA!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;参数为可空的函数类型&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Collection&lt;/span&gt;&amp;lt;T&amp;gt;.joinToString(separator: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                                   prefix: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                                   postfix: String,
                                   transform: ((T) -&amp;gt; String )?): String {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = StringBuilder(prefix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ((index, element) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; withIndex()) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (index &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) result.append(separator)    
        result.append(transform&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;invoke(element))
    }
    result.append(postfix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result.toString()

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;815-返回函数的函数&#34;&gt;8.1.5 返回函数的函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Delivery&lt;/span&gt; {STANDARD, EXPEDITED }

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Order&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; itemCount: Int)

&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getShippingCostCalculator&lt;/span&gt;(delivery: Delivery): (Order) -&amp;gt; Double {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (delivery == Delivery.EXPEDITED) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; { order -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; + &lt;span style=&#34;color:#ae81ff&#34;&gt;2.1&lt;/span&gt; * order.itemCount }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; { order -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt; * order.itemCount }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; calculator = getShippingCostCalculator(Delivery.EXPEDITED)
println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shipping costs ${calculator(Order(3))}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//Shipping costs 12.3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContactListFilters&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; prefix: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; onlyWithPhoneNumber: Boolean = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getPredicate&lt;/span&gt;(): (Person) -&amp;gt; Boolean {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; startsWithPrefix = { p: Person -&amp;gt;
            p.firstName.startsWith(prefix) || p.lastName.startsWith(prefix)
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!onlyWithPhoneNumber) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; startsWithPrefix
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; { startsWithPrefix(it) &amp;amp;&amp;amp; it.phoneNumber != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; firstName: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lastName: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; phoneNumber: String?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; contacts = listOf(Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dmitry&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jemerov&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123-4567&amp;#34;&lt;/span&gt;),
            Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Svetlana&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Isakova&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; contactListFilters = ContactListFilters()
    with(contactListFilters) {
        prefix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dm&amp;#34;&lt;/span&gt;
        onlyWithPhoneNumber = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    }
    println(contacts.filter(contactListFilters.getPredicate()))
    &lt;span style=&#34;color:#75715e&#34;&gt;//[Person(firstName=Dmitry, lastName=Jemerov, phoneNumber=123-4567)]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;816-通过lambda去除重复代码&#34;&gt;8.1.6 通过lambda去除重复代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SiteVisit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; path: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; duration: Double, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; os: OS)

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OS&lt;/span&gt; {WINDOWS, LINUX, MAC, IOS, ANDROID }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; log = listOf(
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34.0&lt;/span&gt;,OS.WINDOWS),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;,OS.MAC),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12.0&lt;/span&gt;,OS.WINDOWS),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/signup&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8.0&lt;/span&gt;,OS.IOS),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16.3&lt;/span&gt;,OS.ANDROID)
    )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; averageWindowsDuration = log
            .filter { it.os==OS.WINDOWS }
            .map (SiteVisit&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;duration)
            .average()
    println(averageWindowsDuration) &lt;span style=&#34;color:#75715e&#34;&gt;//23.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;用一个普通方法去除重复代码&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;fun List&amp;lt;SiteVisit&amp;gt;.averageDurationFor(os:OS) = filter { it.os==os }.map (SiteVisit::duration).average()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; log = listOf(
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34.0&lt;/span&gt;,OS.WINDOWS),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;,OS.MAC),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12.0&lt;/span&gt;,OS.WINDOWS),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/signup&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8.0&lt;/span&gt;,OS.IOS),
            SiteVisit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16.3&lt;/span&gt;,OS.ANDROID)
    )
    println(log.averageDurationFor(OS.WINDOWS)) &lt;span style=&#34;color:#75715e&#34;&gt;//23.0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    println(log.averageDurationFor(OS.MAC)) &lt;span style=&#34;color:#75715e&#34;&gt;//22.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;82-内联函数消除lambda带来的运行时开销&#34;&gt;8.2 内联函数：消除lambda带来的运行时开销&lt;/h2&gt;
&lt;h3 id=&#34;821-内联函数如何运作&#34;&gt;8.2.1 内联函数如何运作&lt;/h3&gt;
&lt;h3 id=&#34;822-内联函数的限制&#34;&gt;8.2.2 内联函数的限制&lt;/h3&gt;
&lt;h3 id=&#34;823-内联集合操作&#34;&gt;8.2.3 内联集合操作&lt;/h3&gt;
&lt;h3 id=&#34;824-决定何时将函数声明成内联&#34;&gt;8.2.4 决定何时将函数声明成内联&lt;/h3&gt;
&lt;h3 id=&#34;825-使用内联lambda管理资源&#34;&gt;8.2.5 使用内联lambda管理资源&lt;/h3&gt;
&lt;h2 id=&#34;83-高阶函数中的控制流&#34;&gt;8.3 高阶函数中的控制流&lt;/h2&gt;
&lt;h3 id=&#34;831-lambda中的返回语句从一个封闭的函数返回&#34;&gt;8.3.1 lambda中的返回语句：从一个封闭的函数返回&lt;/h3&gt;
&lt;h3 id=&#34;832-从lambda返回使用标签返回&#34;&gt;8.3.2 从lambda返回：使用标签返回&lt;/h3&gt;
&lt;h3 id=&#34;833-匿名函数默认使用局部返回&#34;&gt;8.3.3 匿名函数：默认使用局部返回&lt;/h3&gt;
- https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter8/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>《Kotlin实战》读书笔记 第7章 运算符重载及其他约定</title>
        <link>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter7/</link>
        <pubDate>Sun, 09 Sep 2018 12:26:55 +0000</pubDate>
        
        <guid>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter7/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter7/ -&lt;h2 id=&#34;71-重载算术运算符&#34;&gt;7.1 重载算术运算符&lt;/h2&gt;
&lt;h3 id=&#34;711-重载二元算术运算&#34;&gt;7.1.1 重载二元算术运算&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; x: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; y: Int) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plus&lt;/span&gt;(other: Point): Point {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(x + other.x, y + other.y)
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p1 = Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p2 = Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
println(p1 + p2) &lt;span style=&#34;color:#75715e&#34;&gt;//Point(x=40, y=60)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;把运算符定义为扩展函数&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;.plus(other: Point): Point {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(x + other.x, y + other.y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;表达式&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;函数名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a * b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;times&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a / b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;div&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a % b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a + b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;plus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a - b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;minus&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;.times(scale: Double): Point {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point((x * scale).toInt(), (y * scale).toInt())
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p = Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
print(p * &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//Point(x=15, y=30)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin运算符不会自动支持交换性。如果希望用户能够使用15*p以外，还能使用p*1.6，你需要为它定义个单独的运算符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Double&lt;/span&gt;.times(p:Point):Point{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point((p.x * &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;).toInt(), (p.y * &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;).toInt())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;operator fun Char.times(count: Int): String {
    return toString().repeat(count)
}
println(&amp;#39;a&amp;#39; * 3) //aaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;712-重载符合运算符&#34;&gt;7.1.2 重载符合运算符&lt;/h3&gt;
&lt;h3 id=&#34;713-重载一元运算符&#34;&gt;7.1.3 重载一元运算符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;.unaryMinus():Point{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(-x,-y)
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p = Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
println(-p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;表达式&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;函数名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;+a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;unaryPlus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;-a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;unaryMinus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;!a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;++a，a++&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;inc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;ndash;a，a&amp;ndash;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;定义自增运算符&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BigDecimal&lt;/span&gt;.inc() = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; +BigDecimal.ONE
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bd = BigDecimal.ZERO
println(bd++) &lt;span style=&#34;color:#75715e&#34;&gt;//0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(++bd) &lt;span style=&#34;color:#75715e&#34;&gt;//2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h2 id=&#34;72-重载比较运算符&#34;&gt;7.2 重载比较运算符&lt;/h2&gt;
&lt;h3 id=&#34;721-等号运算符equals&#34;&gt;7.2.1 等号运算符：“equals”&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; x: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; y: Int) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(other: Any?): Boolean {
    &lt;span style=&#34;color:#75715e&#34;&gt;//这里使用了恒等运算符===来检查参数与调用equals的对象是否相同。恒等运算符与Java中的==运算符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//是完全相同的；===运算符不能被重载
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (other === &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (other !&lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; Point) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; other.x == x &amp;amp;&amp;amp; other.y == y
    }
}
println(Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)==Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)!=Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; == Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;722-排序运算符compareto&#34;&gt;7.2.2 排序运算符：compareTo&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; firstName: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lastName: String) : Comparable&amp;lt;Person&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compareTo&lt;/span&gt;(other: Person): Int {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; compareValuesBy(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, other, Person&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;lastName, Person&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;firstName)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;73-集合与区间的约定&#34;&gt;7.3 集合与区间的约定&lt;/h2&gt;
&lt;h3 id=&#34;731-通过下标来访问元素get和set&#34;&gt;7.3.1 通过下标来访问元素：“get”和“set”&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;实现get约定&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(index: Int): Int {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; (index) {
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -&amp;gt; x
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -&amp;gt; y
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; -&amp;gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IndexOutOfBoundsException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid coordinate $index&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p = Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
println(p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;//20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;实现set约定&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MutablePoint&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;(index: Int, value: Int) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; (index) {
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -&amp;gt; x = value
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -&amp;gt; y = value
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; -&amp;gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IndexOutOfBoundsException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid coordinate $index&amp;#34;&lt;/span&gt;)

    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p = MutablePoint(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
println(p) &lt;span style=&#34;color:#75715e&#34;&gt;//MutablePoint(x=10, y=42)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;732-in的约定&#34;&gt;7.3.2 “in”的约定&lt;/h3&gt;
&lt;p&gt;in运算符，用于检查某个对象是否属于集合。相应的函数叫做&lt;code&gt;contains&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; upperLeft:Point,&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lowerRight:Point)

&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt;.contains(p:Point):Boolean{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p.x &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; upperLeft.x until lowerRight.x &amp;amp;&amp;amp;
            p.y &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; upperLeft.y until lowerRight.y
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; rect = Rectangle(Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;),Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;))
println(Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; rect) &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; rect) &lt;span style=&#34;color:#75715e&#34;&gt;//false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;733-rangeto的约定&#34;&gt;7.3.3 rangeTo的约定&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; now = LocalDate.now()
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; vacation = now..now.plusDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
println(now.plusWeeks(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; vacation) &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; n = &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
println(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.(n+&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//0..10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;.n).forEach(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;print) &lt;span style=&#34;color:#75715e&#34;&gt;//0123456789
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;734-在for循环中使用iterator的约定&#34;&gt;7.3.4 在“for”循环中使用“iterator”的约定&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClosedRange&lt;/span&gt;&amp;lt;LocalDate&amp;gt;.iterator(): Iterator&amp;lt;LocalDate&amp;gt; =
        &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Iterator&lt;/span&gt;&amp;lt;LocalDate&amp;gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; current = start
            &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;() = current &amp;lt;= endInclusive
            &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;() = current.apply {
                current = plusDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            }
        }
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; newYear = LocalDate.ofYearDay(&lt;span style=&#34;color:#ae81ff&#34;&gt;2017&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; daysOff = newYear.minusDays(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)..newYear
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (dayOff &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; daysOff) {
    println(dayOff)
}
&lt;span style=&#34;color:#75715e&#34;&gt;//    2016-12-31
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//    2017-01-01
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter7/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>《Kotlin实战》读书笔记 第6章 Kotlin的类型系统</title>
        <link>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter6/</link>
        <pubDate>Thu, 06 Sep 2018 12:26:55 +0000</pubDate>
        
        <guid>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter6/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter6/ -&lt;h2 id=&#34;61-可空性&#34;&gt;6.1 可空性&lt;/h2&gt;
&lt;h3 id=&#34;611-可空类型&#34;&gt;6.1.1 可空类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image%20%284%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//增加了null检查后，这段代码就可以编译了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strLenSafe&lt;/span&gt;(s: String?) = &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) s.length &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;612-类型的含义&#34;&gt;6.1.2 类型的含义&lt;/h3&gt;
&lt;h3 id=&#34;613-安全调用运算符&#34;&gt;6.1.3 安全调用运算符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;安全调用运算符?&lt;/code&gt;允许把一次null检查和一次方法调用合并成一个操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strLenSafe&lt;/span&gt;(s: String?) = s&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;length
println(strLenSafe(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//null
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;614-elvis运算符&#34;&gt;6.1.4 Elvis运算符&lt;/h3&gt;
&lt;p&gt;Elvis运算符接收两个运算数，如果第一个运算数不为null，运算结果就是第一个运算数；如果第一个运算数为null，运算结果就是第二个运算数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strLenSafe&lt;/span&gt;(s: String?) = s&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;length
println(strLenSafe(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//null·
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;615-安全转换as&#34;&gt;6.1.5 安全转换：“as?”&lt;/h3&gt;
&lt;p&gt;as?运算符尝试把值转换成指定的类型，如果值不是合适的类型就返回null。&lt;/p&gt;
&lt;h3 id=&#34;616-非空断言&#34;&gt;6.1.6 非空断言：“!!”&lt;/h3&gt;
&lt;h3 id=&#34;617-let-函数&#34;&gt;6.1.7 “let” 函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendEmailTo&lt;/span&gt;(email:String){&lt;span style=&#34;color:#75715e&#34;&gt;/**/&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(email!=&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) sendEmailTo(email)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;let函数只有email的值非空时才被调用，所以你就能在lambda中把email当做非空的实参使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; email:String? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
email&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;let { email-&amp;gt;sendEmailTo(email) }
email&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;let(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sendEmailTo)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;618-延迟初始化的属性&#34;&gt;6.1.8 延迟初始化的属性&lt;/h3&gt;
&lt;h3 id=&#34;619-可空类型的扩展&#34;&gt;6.1.9 可空类型的扩展&lt;/h3&gt;
&lt;h3 id=&#34;6110-类型参数的可空性&#34;&gt;6.1.10 类型参数的可空性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printHashCode&lt;/span&gt;(t:T){
    println(t&lt;span style=&#34;color:#f92672&#34;&gt;?.&lt;/span&gt;hashCode()) &lt;span style=&#34;color:#75715e&#34;&gt;//t可能为null,所以必须使用安全调用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;为类型参数声明非空上界&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T:Any&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printHashCode&lt;/span&gt;(t:T){
    println(t.hashCode()) &lt;span style=&#34;color:#75715e&#34;&gt;// t不是可空的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;6111-可控性和java&#34;&gt;6.1.11 可控性和Java&lt;/h3&gt;
&lt;h2 id=&#34;62-基本数据类型和其他基本类型&#34;&gt;6.2 基本数据类型和其他基本类型&lt;/h2&gt;
&lt;h3 id=&#34;621-基本数据类型intboolean及其他&#34;&gt;6.2.1 基本数据类型：Int、Boolean及其他&lt;/h3&gt;
&lt;p&gt;Kotlin并不区分基本数据类型和包装类型，你使用的永远是同一个类型。&lt;/p&gt;
&lt;p&gt;大多数情况下对于变量、属性、参数和返回类型，Kotlin的Int类型会被编译成Java基本数据类型int。唯一不可行的例外是泛型类，比如集合。用作泛型类型参数的基本数据类型会被编译成对应的Java包装类。&lt;/p&gt;
&lt;h3 id=&#34;622-可控的基本数据类型intboolean及其他&#34;&gt;6.2.2 可控的基本数据类型：Int?、Boolean？及其他&lt;/h3&gt;
&lt;p&gt;Kotlin中的可空类型会编译成对应的包装类型。&lt;/p&gt;
&lt;h3 id=&#34;623-数字转换&#34;&gt;6.2.3 数字转换&lt;/h3&gt;
&lt;p&gt;Kotlin不会自动地把数字从一个类型转换成另外一种，即便是转换成范围更大的类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image%20%285%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; l: Long = i.toLong() &lt;span style=&#34;color:#75715e&#34;&gt;//显式进行转换
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;624-any和any根类型&#34;&gt;6.2.4 “Any”和“Any?”：根类型&lt;/h3&gt;
&lt;h3 id=&#34;625-unit类型kotlin的void&#34;&gt;6.2.5 Unit类型：Kotlin的“void”&lt;/h3&gt;
&lt;h3 id=&#34;626-nothing类型这个函数永不返回&#34;&gt;6.2.6 Nothing类型：“这个函数永不返回”&lt;/h3&gt;
&lt;h2 id=&#34;63-集合与数组&#34;&gt;6.3 集合与数组&lt;/h2&gt;
&lt;h3 id=&#34;631-可空性和集合&#34;&gt;6.3.1 可空性和集合&lt;/h3&gt;
&lt;h3 id=&#34;632-只读集合与可变集合&#34;&gt;6.3.2 只读集合与可变集合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kotlin.collections.Collection&lt;/code&gt;接口可以遍历集合中的元素、获取集合大小、判断集合中是否包含某个元素，以及执行其他从集合中读取数据的操作。但这个接口没有任何添加或移除元素的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kotlin.collections.MutableCollection&lt;/code&gt;接口可以修改集合中的数据。它继承了普通的&lt;code&gt;kotlin.collections.Collection&lt;/code&gt;接口。�还提供了方法来添加和移除元素、清空集合等。&lt;/p&gt;
&lt;h3 id=&#34;633-kotlin集合和java&#34;&gt;6.3.3 Kotlin集合和Java&lt;/h3&gt;
&lt;h3 id=&#34;634-作为平台类型的集合&#34;&gt;6.3.4 作为平台类型的集合&lt;/h3&gt;
&lt;h3 id=&#34;635-对象和基本数据类型的数组&#34;&gt;6.3.5 对象和基本数据类型的数组&lt;/h3&gt;
&lt;p&gt;Kotlin有以下方法来创建数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arrayOf函数创建一个数组，它包含的元素是指定为该函数的实参&lt;/li&gt;
&lt;li&gt;arrayOfNulls创建一个给定大小的数组，包含的是null元素。当然，它只能用来创建包含元素类型可空的数组。&lt;/li&gt;
&lt;li&gt;Array构造方法接收数组的大小和一个lambda表达式，调用lambda表达式来创建每一个数组元素。这就是使用非空元素类型来初始化数组，但不用显式地传递每个元素的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; letters = Array&amp;lt;String&amp;gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;){i-&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;+i).toString()}
println(letters.joinToString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//abcdefghijklmnopqrstuvwxyz
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; strings = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//toTypedArray方法将集合转换为数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s/%s/%s&amp;#34;&lt;/span&gt;.format(*strings.toTypedArray()))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要创建一个基本类型的数组，有如下选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该类型的构造方法接收size参数并返回一个使用对应基本数据类型默认值初始化好的数组。&lt;/li&gt;
&lt;li&gt;工厂函数接收变长参数的值并创建存储这些值的数组&lt;/li&gt;
&lt;li&gt;另一种构造方法，接收一个大小和一个用来初始化每个元素的lambda。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fiveZeros = IntArray(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fiveZerosToo = intArrayOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; squares = IntArray(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) { i -&amp;gt; (i + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) * (i + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) }
println(squares.joinToString()) &lt;span style=&#34;color:#75715e&#34;&gt;//1, 4, 9, 16, 25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin标准库支持一套和集合相同的用于数组的扩展函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(squares.filter { it % &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; }.joinToString()) &lt;span style=&#34;color:#75715e&#34;&gt;//4, 16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/androiddevelopers/collections-and-sequences-in-kotlin-55db18283aca&#34;&gt;Collections and sequences in Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter6/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>《Kotlin实战》读书笔记 第5章 Lambda编程</title>
        <link>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter5/</link>
        <pubDate>Tue, 04 Sep 2018 12:26:55 +0000</pubDate>
        
        <guid>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter5/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter5/ -&lt;h2 id=&#34;51-lambda表达式和成员引用&#34;&gt;5.1 Lambda表达式和成员引用&lt;/h2&gt;
&lt;h3 id=&#34;511-lambda简介作为函数参数的代码块&#34;&gt;5.1.1 Lambda简介：作为函数参数的代码块&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;button&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setOnClickLisener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OnClickListener&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View view&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;//点击后执行的动作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;button.setOnClickListener(&lt;span style=&#34;color:#75715e&#34;&gt;/*点击后执行的动作*/&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;512-lambda和集合&#34;&gt;5.1.2 Lambda和集合&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name:String,&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; age:Int)

&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTheOldest&lt;/span&gt;(people:List&amp;lt;Person&amp;gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; maxAge = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; theOldest:Person? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (person &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; people){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(person.age &amp;gt; maxAge){
            maxAge = person.age
            theOldest = person
        }
    }
    println(theOldest)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; people = listOf(Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;),Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;))
findTheOldest(people)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;用lambda在集合中搜索&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; people = listOf(Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;),Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;))
println(people.maxBy { it.age })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;513-lambda表达式的语法&#34;&gt;5.1.3 Lambda表达式的语法�&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image%20%282%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; sum = { x: Int, y: Int -&amp;gt; x + y }
println(sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
{ println(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) }() &lt;span style=&#34;color:#75715e&#34;&gt;//直接调用lambda表达式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;run { println(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) } &lt;span style=&#34;color:#75715e&#34;&gt;//使用库函数run来执行lambda
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//不用任何简明语法来重写这个例子
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;people.maxBy({p:Person-&amp;gt;p.age})
&lt;span style=&#34;color:#75715e&#34;&gt;//如果lambda表达式是函数调用的最后一个实参，可以放到括号的外边
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;people.maxBy(){p:Person-&amp;gt;p.age}
&lt;span style=&#34;color:#75715e&#34;&gt;//当lambda是唯一的实参时，还可以去掉调用代码中的空括号对
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;people.maxBy { p:Person-&amp;gt;p.age }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和局部变量一样，如果lambda参数的类型可以被推倒出来，你就不需要显式地指定它。以这里的maxBy函数为例，其参数类型始终和集合的元素类型相同。编译器知道你是对一个Person对象的集合调用maxBy函数，所以它能推断lambda参数也会是Person类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;people.maxBy { p-&amp;gt;p.age } &lt;span style=&#34;color:#75715e&#34;&gt;//推导出参数类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;people.maxBy{ it.age }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果当前上下文期望的是只有一个参数的Lambda切这个参数的类型可以推断出来，就会生成it这个名称。&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;包含更多语句的lambda表达式&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; sum = {x:Int,y:Int-&amp;gt;
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Computing the sum of $x and $y...&amp;#34;&lt;/span&gt;)
    x + y
}
println(sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) 
&lt;span style=&#34;color:#75715e&#34;&gt;//Computing the sum of 1 and 2...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;514-在作用域中访问变量&#34;&gt;5.1.4 在作用域中访问变量&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printMessagePrefix&lt;/span&gt;(messages: Collection&amp;lt;String&amp;gt;, prefix: String) {
    messages.forEach {
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$prefix $it&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; errors = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;403 Forbidden&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;404 Not Found&amp;#34;&lt;/span&gt;)
printMessagePrefix(errors, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//Error: 403 Forbidden
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//Error: 404 Not Found
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printProblemCounts&lt;/span&gt;(response: Collection&amp;lt;String&amp;gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; clientErrors = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; serverErrors = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    response.forEach {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (it.startsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;)) {
            clientErrors++ &lt;span style=&#34;color:#75715e&#34;&gt;//在lambda中修改变量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (it.startsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;)) {
            serverErrors++
        }
    }
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$clientErrors client errors,$serverErrors server errors&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; responses = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200 OK&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;418 I&amp;#39;m a teapot&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500 Internal Server Error&amp;#34;&lt;/span&gt;)
printProblemCounts(responses)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和Java不一样，Kotlin允许在lambda内部访问非final变量甚至修改它们。从lambda内访问外部变量，我们称这些变量被lambda捕捉。&lt;/p&gt;
&lt;h3 id=&#34;515-成员引用&#34;&gt;5.1.5 成员引用&lt;/h3&gt;
&lt;p&gt;kotlin和Java8一样，如果把函数转换成一个值，你就可以传递他。使用::元素安抚来转换。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;val getAge = Person::age
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种表达式称为&lt;code&gt;成员引用&lt;/code&gt;，它提供了简明语法，来创建一个调用单个方法或者访问单个属性的函数值。&lt;/p&gt;
&lt;p&gt;成员引用和调用该函数的lambda具有一样的类型，可以互换使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;people.maxBy ( Person&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;age )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以引用顶层函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;salute&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Salute!&amp;#34;&lt;/span&gt;)
run(&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;salute)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以用&lt;code&gt;构造方法引用&lt;/code&gt;存储或者延期执行创建类实例的动作。构造方法引用的形式是在双冒号后执行类名称：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; createPerson = &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Person &lt;span style=&#34;color:#75715e&#34;&gt;//创建Person实例的动作被保存成了值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; p = createPerson(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
println(p)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以用同样的方式引用扩展函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;.isAdult() = age &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; predicate = Person&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;isAdult
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;52-集合的函数式api&#34;&gt;5.2 集合的函数式API&lt;/h2&gt;
&lt;h3 id=&#34;521-基础filter和map&#34;&gt;5.2.1 基础：filter和map&lt;/h3&gt;
&lt;p&gt;filter和map函数形成了集合操作的基础，很多集合操作都是借助它们来表达的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; list = listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
println(list.filter { it % &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; }) &lt;span style=&#34;color:#75715e&#34;&gt;//[2, 4]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; list = listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
println(list.map { it * it }) &lt;span style=&#34;color:#75715e&#34;&gt;//[1, 4, 9, 16]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;522-all-any-count-和-find对集合应用判断式&#34;&gt;5.2.2 “all” “any” “count” 和 “find”：对集合应用判断式&lt;/h3&gt;
&lt;p&gt;all函数判断是否所有元素都满足判断式。&lt;/p&gt;
&lt;p&gt;any函数判断是否至少存在一个匹配的元素。&lt;/p&gt;
&lt;p&gt;count函数返回满足判断式元素的个数。&lt;/p&gt;
&lt;p&gt;find函数找到满足判断的元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(people.all(canBeInClude27)) &lt;span style=&#34;color:#75715e&#34;&gt;//false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(people.any(canBeInClude27)) &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(people.count(canBeInClude27)) &lt;span style=&#34;color:#75715e&#34;&gt;//1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(people.find(canBeInClude27)) &lt;span style=&#34;color:#75715e&#34;&gt;//Person(name=Alice, age=27)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;523-groupby把列表转换成分组的map&#34;&gt;5.2.3 groupBy：把列表转换成分组的map&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; people = listOf(Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;), Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;), Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Carol&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;))
println(people.groupBy { it.age })
&lt;span style=&#34;color:#75715e&#34;&gt;//{27=[Person(name=Alice, age=27)], 31=[Person(name=Bob, age=31), Person(name=Carol, age=31)]}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;524-flatmap和flatten处理嵌套集合中的元素&#34;&gt;5.2.4 flatMap和flatten：处理嵌套集合中的元素&lt;/h3&gt;
&lt;p&gt;flatMap函数做了两件事情：首先根据作为实参给定的函数对集合中的每个元素做变换，然后把多个列表合并成一个列表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; strings = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;def&amp;#34;&lt;/span&gt;)
println(strings.flatMap(String&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;toList))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; books = listOf(Book(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thursday Next&amp;#34;&lt;/span&gt;, listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jasper Fforde&amp;#34;&lt;/span&gt;)),
                   Book(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mort&amp;#34;&lt;/span&gt;, listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Terry Pratchett&amp;#34;&lt;/span&gt;)),
                   Book(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Good Omens&amp;#34;&lt;/span&gt;, listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Terry Pratchett&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Neil Gaiman&amp;#34;&lt;/span&gt;)))
println(books.flatMap(Book&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;authors).toSet()) &lt;span style=&#34;color:#75715e&#34;&gt;// toSet去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//[Jasper Fforde, Terry Pratchett, Neil Gaiman]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;53-惰性集合操作序列&#34;&gt;5.3 惰性集合操作：序列&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;people.map(Person&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;name).filter{it.startsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin标准库参考文档有说明，filter和map都会返回一个列表。这意味着上面例子中的链式调用会创建两个列表：一个保存filter函数的结果，另一个保存map函数的结果。如果源列表只有两个元素，这不是什么问题，但是如果有一百万个元素，调用就会变得十分低效。&lt;/p&gt;
&lt;p&gt;为了提高效率，可以把操作变成使用序列，而不是直接使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    people.asSequence()
            .map(Person&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;name)
            .filter{it.startsWith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)}
            .toList()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sequence接口的强大之处在于其操作的实现方式。序列中的元素求值是惰性的。因此可以使用序列更高效地对集合元素执行链式操作，而不需要创建额外的集合来保存过程中产生的中间结果。&lt;/p&gt;
&lt;p&gt;可以调用扩展函数asSequence把任意集合转换成序列，调用toList来做反向的转换。&lt;/p&gt;
&lt;h3 id=&#34;531-执行序列操作中间和末端操作&#34;&gt;5.3.1 执行序列操作：中间和末端操作&lt;/h3&gt;
&lt;p&gt;中间操作始终是惰性的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
            .asSequence()
            .map { print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;map($it) &amp;#34;&lt;/span&gt;);it * it }
            .filter { print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter($it) &amp;#34;&lt;/span&gt;);it % &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行这段代码并不会在控制台上输出任何内容。这意味着map和filter变换被延期了，它们只有在获取结果的时候才会被应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;    listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
            .asSequence()
            .map { print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;map($it) &amp;#34;&lt;/span&gt;);it * it }
            .filter { print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter($it) &amp;#34;&lt;/span&gt;);it % &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; }
            .toList()
    &lt;span style=&#34;color:#75715e&#34;&gt;//map(1) filter(1) map(2) filter(4) map(3) filter(9) map(4) filter(16)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;末端操作触发执行了所有的延期计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
        .asSequence()
        .map { it * it }
        .find { it &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;�&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image%20%283%29.png&#34; alt=&#34;&amp;#x53CA;&amp;#x65E9;&amp;#x6C42;&amp;#x503C;&amp;#x5728;&amp;#x6574;&amp;#x4E2A;&amp;#x96C6;&amp;#x5408;&amp;#x4E0A;&amp;#x6267;&amp;#x884C;&amp;#x6BCF;&amp;#x4E2A;&amp;#x64CD;&amp;#x4F5C;&amp;#xFF1B;&amp;#x60F0;&amp;#x6027;&amp;#x6C42;&amp;#x503C;&amp;#x5219;&amp;#x9010;&amp;#x4E2A;&amp;#x5904;&amp;#x7406;&amp;#x5143;&amp;#x7D20;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;532-创建序列&#34;&gt;5.3.2 创建序列&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;使用generateSequence函数创建序列&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; naturalNumbers = generateSequence(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { it + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; numbersTo100 = naturalNumbers.takeWhile { it &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; }
println(numbersTo100.sum())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h2 id=&#34;54-使用java函数式接口&#34;&gt;5.4 使用Java函数式接口&lt;/h2&gt;
&lt;h3 id=&#34;541-把lambda当做参数传递给java方法&#34;&gt;5.4.1 把lambda当做参数传递给Java方法&lt;/h3&gt;
&lt;h3 id=&#34;542-sam构造方法显式地把lambda转换成函数式接口&#34;&gt;5.4.2 SAM构造方法：显式地把lambda转换成函数式接口&lt;/h3&gt;
&lt;h2 id=&#34;55-带接收者的lambdawith与apply&#34;&gt;5.5 带接收者的lambda：“with”与“apply”&lt;/h2&gt;
&lt;h3 id=&#34;551-with函数&#34;&gt;5.5.1 “with”函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt;(): String {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = StringBuilder()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (letter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;){
        result.append(letter)
    }
    result.append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nNow I know the alphabet!&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result.toString()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用result实例上好几个不同的方法，而且每次调用都要重复result这个名称。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt;(): String {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = StringBuilder()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; with(result){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(letter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;){
            append(letter)
        }
        append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nNow I know the alphabet!&amp;#34;&lt;/span&gt;)
        toString()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进一步重构alphabet函数，去掉额外的StringBuilder变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt;() = with(StringBuffer()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (letter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;) {
        append(letter)
    }
    append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nNow I know the alphabet!&amp;#34;&lt;/span&gt;)
    toString()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;552-apply函数&#34;&gt;5.5.2 “apply”函数&lt;/h3&gt;
&lt;p&gt;apply函数几乎和with函数一模一样，唯一的区别是apply始终会返回作为实参传递给它的对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt;() = StringBuilder().apply {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (letter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;) {
        append(letter)
    }
    append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nNow I know the alphabet&amp;#34;&lt;/span&gt;)
}.toString()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;使用apply初始化一个TextView&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createViewWithCustomAttributes&lt;/span&gt;(context:Context) = 
    TextView(context).apply{
        text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sample Text&amp;#34;&lt;/span&gt;
        textSize = &lt;span style=&#34;color:#ae81ff&#34;&gt;20.0&lt;/span&gt;
        setPadding(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;标准库函数buildString负责创建StringBuilder并调用toString。buildString的实参是一个带接收者的lambda，接收者就是StringBuilder。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alphabet&lt;/span&gt;() =  buildString{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (letter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;) {
        append(letter)
    }
    append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nNow I know the alphabet&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter5/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>《Kotlin实战》读书笔记 第4章 类对象和接口</title>
        <link>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter4/</link>
        <pubDate>Tue, 28 Aug 2018 12:26:55 +0000</pubDate>
        
        <guid>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter4/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter4/ -&lt;h2 id=&#34;41-定义类继承结构&#34;&gt;4.1 定义类继承结构&lt;/h2&gt;
&lt;h3 id=&#34;411-kotlin中的接口&#34;&gt;4.1.1 Kotlin中的接口&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//接口定义
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Clickable&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;()
}
&lt;span style=&#34;color:#75715e&#34;&gt;//实现接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;:Clickable{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I was clicked&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接口的方法可以有一个默认实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Clickable&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showOff&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m clickable!&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//带默认实现的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设存在同样定义了一个showOff方法并且有如下实现的另一个接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Focusable&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setFocus&lt;/span&gt;(b: Boolean) =
            println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I ${if (b) &amp;#34;&lt;/span&gt;got&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; else &amp;#34;&lt;/span&gt;lost&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;} focus.&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showOff&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m focusable!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类实现这两个接口，如果没有显式实现showOff，将会得到如下编译错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image%20%281%29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; : Clickable,Focusable {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I was clicked&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showOff&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&amp;lt;Clickable&amp;gt;.showOff()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&amp;lt;Focusable&amp;gt;.showOff()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;412-openfinal和abstarc修饰符默认为final&#34;&gt;4.1.2 open、final和abstarc修饰符：默认为final&lt;/h3&gt;
&lt;p&gt;Java的类和方法默认是open的，而kotlin中默认都是final的。如果你想允许创建一个类的子类， 需要使用open修饰符来标示这个类。此外，需要给每一个可以被重写的属性或方法添加open修饰符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RichButton&lt;/span&gt;:Clickable{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disable&lt;/span&gt;(){} &lt;span style=&#34;color:#75715e&#34;&gt;//final函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;animate&lt;/span&gt;(){} &lt;span style=&#34;color:#75715e&#34;&gt;//open函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;() {} &lt;span style=&#34;color:#75715e&#34;&gt;//这个函数重写了一个open函数它本身同样是open函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果重写了一个基类或者接口的成员，重写了的成员同样默认是open的，如果你想改变这一行为，阻止你的子类重写你的实现，可以显式地将重写的成员标注为final。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RichButton&lt;/span&gt;:Clickable{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;() {} 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;抽象成员&lt;/strong&gt;始终是open的，所以不需要显式地使用open修饰符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animated&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;animate&lt;/span&gt;()
    &lt;span style=&#34;color:#75715e&#34;&gt;//抽象类中的非抽象函数并不是默认open的,但是可以标注为open的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stopAnimating&lt;/span&gt;(){}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;animateTwice&lt;/span&gt;(){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;413-可见性修饰符默认为public&#34;&gt;4.1.3 可见性修饰符：默认为public&lt;/h3&gt;
&lt;h3 id=&#34;414-内部类和嵌套类默认是嵌套类&#34;&gt;4.1.4 内部类和嵌套类：默认是嵌套类&lt;/h3&gt;
&lt;p&gt;与Java不同，Kotlin的嵌套类不能访问外部类的实例。&lt;/p&gt;
&lt;h3 id=&#34;415-密封类定义受限的类继承结构&#34;&gt;4.1.5 密封类：定义受限的类继承结构&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Expr&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Num&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; value: Int) : Expr
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; left: Expr, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; right: Expr) : Expr

&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eval&lt;/span&gt;(e: Expr): Int =
        &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; (e) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; Num -&amp;gt; e.value
            &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; Sum -&amp;gt; eval(e.right) + eval(e.left)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;//必须检查else分支
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown expression&amp;#34;&lt;/span&gt;)
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总是不得不添加一个默认分支很不方便。更重要的是，如果你添加一个新的子类，编译器并不能发现有地方改变了，如果你忘记了添加一个新分支，就会选择默认的选项，这可能导致潜在的bug。&lt;/p&gt;
&lt;p&gt;Kotlin为这个问题提供了一个解决方案：sealed类。为父类添加一个sealed修饰符，对可能创建的子类做出严格的限制。所有的直接子类必须嵌套在父类中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Expr&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Num&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; value: Int) : Expr()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; left: Expr, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; right: Expr) : Expr()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eval&lt;/span&gt;(e: Expr): Int =
        &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; (e) { &lt;span style=&#34;color:#75715e&#34;&gt;//不需要提供默认分支
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; Expr.Num -&amp;gt; e.value
            &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; Expr.Sum -&amp;gt; eval(e.right) + eval(e.left)
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sealed修饰符隐含的这个类是一个open类，不再需要显式地添加open修饰符。&lt;/p&gt;
&lt;h2 id=&#34;42-声明一个带非默认构造方法或属性的类&#34;&gt;4.2 声明一个带非默认构造方法或属性的类&lt;/h2&gt;
&lt;h3 id=&#34;421-初始化类主构造方法和初始化语句块&#34;&gt;4.2.1 初始化类：主构造方法和初始化语句块&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段被括号围起来的语句块就叫作主构造方法，它主要有两个目的：表明构造方法的参数，以及定义使用这些参数初始化的属性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(_nickname: String) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname :String
    init {
        nickname = _nickname
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;constructor&lt;/code&gt;关键字用来开始一个主构造方法或从构造方法的声明。&lt;code&gt;init&lt;/code&gt;关键字用来引入一个初始化语句块。因为主构造方法有语法限制，不能包含初始化代码，所以要使用初始化语句块。一个类中可以声明多个初始化语句块。&lt;/p&gt;
&lt;p&gt;构造方法参数&lt;code&gt;_nickname&lt;/code&gt;中的下划线用来区分属性的名字和构造方法参数的名字。另一个可选方案是使用同样的名字，通过this来消除歧义。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(nickname: String) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname :String
    init {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.nickname = nickname
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，不需要把初始化代码块放在初始化语句块中，因为它可以与nickname属性的声明结合。如果主构造方法没有注解或可见性修饰符，同样可以去掉constructor关键字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(_nickname: String) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname = _nickname
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;为构造方法参数提供一个默认值&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String,
           &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; isSubscribed:Boolean = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TwitterUser&lt;/span&gt;(nickname: String) : User(nickname)

&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//将生成一个不带任何参数的默认构造方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RadioButton&lt;/span&gt; : Button() &lt;span style=&#34;color:#75715e&#34;&gt;//注意与接口的区别,接口不带括号
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不想类被其他代码实例化，必须把构造方法标记为&lt;code&gt;private&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Secretive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;() {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;422-构造方法用不同的方式来初始化父类&#34;&gt;�4.2.2 构造方法：用不同的方式来初始化父类&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;View&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(ctx: Context){
        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(ctx: Context,attr:AttributeSet){
        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyButton&lt;/span&gt; : View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(ctx: Context):&lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(ctx){ &lt;span style=&#34;color:#75715e&#34;&gt;//调用父类构造方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(ctx: Context,attr:AttributeSet):&lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(ctx,attr){
        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyButton&lt;/span&gt; : View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(ctx: Context):&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;(ctx,MY_STY){ &lt;span style=&#34;color:#75715e&#34;&gt;//委托给这个类的另一个构造方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(ctx: Context,attr:AttributeSet):&lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(ctx,attr){
        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;423-实现在接口中声明的属性&#34;&gt;4.2.3 实现在接口中声明的属性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateUser&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String) : User

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubscribingUser&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; email: String) : User {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String
        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;() = email.substringBefore(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FacebookUser&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; accountId: Int) : User {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname: String = getFacebookName(accountId) &lt;span style=&#34;color:#75715e&#34;&gt;//属性初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFacebookName&lt;/span&gt;(accountId: Int): String {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;424-通过getter或setter访问幕后字段&#34;&gt;4.2.4 通过getter或setter访问幕后字段&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;在setter中访问backing field&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name:String){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; address:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unspecified&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;(value:String){  
        println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;        Address was changed &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;name:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$field&amp;#34;&lt;/span&gt; -&amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$value&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;.trimIndent()) //获取backing field的值
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;        field = value &lt;span style=&#34;color:#75715e&#34;&gt;//更新支持字段的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;425-修改访问器的可见性&#34;&gt;4.2.5 修改访问器的可见性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LengthCounter&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;//不能在类的外部修改这个属性
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; counter: Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addWord&lt;/span&gt;(word: String) {
        counter += word.length
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; lengthCounter = LengthCounter()
lengthCounter.addWord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi!&amp;#34;&lt;/span&gt;)
println(lengthCounter.counter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;43-编译器生成的方法数据类和类委托&#34;&gt;4.3 编译器生成的方法：数据类和类委托&lt;/h2&gt;
&lt;h3 id=&#34;431-通用对象方法&#34;&gt;4.3.1 通用对象方法&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;Client类的最初声明&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name:String,&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; postalCode:Int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;实现toString()方法&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; postalCode: Int) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;() = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Client(name=$name,postalCode=$postalCode)&amp;#34;&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; client1 = Client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;142562&lt;/span&gt;)
println(client1)
&lt;span style=&#34;color:#75715e&#34;&gt;//Client(name=Alice,postalCode=142562)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h4 id=&#34;对象相等性equals&#34;&gt;对象相等性：equals()&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; client1 = Client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142562&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; client2 = Client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142562&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//在Kotlin中,==检查对象是否相等而不是比较引用。这里会编译成调用&amp;#34;equals&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(client1 == client2) &lt;span style=&#34;color:#75715e&#34;&gt;//false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;为Client类实现equals()&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; postalCode: Int) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(other: Any?): Boolean {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (other == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; || other !&lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; Client)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name == other.name &amp;amp;&amp;amp; postalCode == other.postalCode
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;() = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Client(name=$name,postalCode=$postalCode)&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h4 id=&#34;hash容器hashcode&#34;&gt;Hash容器：hashCode()&lt;/h4&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;为Client实现hashCode()&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; postalCode: Int) {
    &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;(): Int = name.hashCode() * &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; + postalCode
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;432-数据类自动生成通用方法的实现&#34;&gt;4.3.2 数据类：自动生成通用方法的实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; postalCode: Int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; client1 = Client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142562&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; client2 = Client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142562&lt;/span&gt;)
println(client1) &lt;span style=&#34;color:#75715e&#34;&gt;//Client(name=Alice, postalCode=142562)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(client1 == client2) &lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; processed=hashSetOf(client1)
println(processed.contains(client2)) &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;数据类和不可变性copy方法&#34;&gt;数据类和不可变性：copy()方法&lt;/h4&gt;
&lt;p&gt;虽然数据类的属性并没有要求是val，但是强烈推荐只使用只读属性，让数据类的实例不可变。&lt;/p&gt;
&lt;p&gt;为了让使用不可变对象的数据类变得更容易，Kotlin编译器为它们多生成了一个方法：一个允许copy类的实例的方法，并在copy的同时修改某些属性的值。创建副本通常是修改实例的好选择：副本有着单独的生命周期而且不会影响代码中引用原始实例的位置。&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;Copy方法的使用&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; bob = Client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;973293&lt;/span&gt;)
println(bob.copy(postalCode = &lt;span style=&#34;color:#ae81ff&#34;&gt;382555&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//Client(name=Bob, postalCode=382555)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;433-类委托使用by关键字&#34;&gt;4.3.3 类委托：使用“by”关键字&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DelegatingCollection&lt;/span&gt;&amp;lt;T&amp;gt;: Collection&amp;lt;T&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; innerList = arrayListOf&amp;lt;T&amp;gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; size: Int = innerList.size
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;(element: T): Boolean = innerList.contains(element)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;containsAll&lt;/span&gt;(elements: Collection&amp;lt;T&amp;gt;): Boolean = innerList.containsAll(elements)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;(): Boolean = innerList.isEmpty()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterator&lt;/span&gt;(): Iterator&amp;lt;T&amp;gt; = innerList.iterator()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;使用by关键字将接口的实现委托到另一个对象&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DelegatingCollection&lt;/span&gt;&amp;lt;T&amp;gt;(innserList:Collection&amp;lt;T&amp;gt; = ArrayList&amp;lt;T&amp;gt;())
: Collection&amp;lt;T&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; innserList
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;使用委托类&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CountingSet&lt;/span&gt;&amp;lt;T&amp;gt;(
        &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; innserSet: MutableCollection&amp;lt;T&amp;gt; = HashSet&amp;lt;T&amp;gt;()
) : MutableCollection&amp;lt;T&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; innserSet {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; objectsAdded = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(element: T): Boolean {
        objectsAdded++
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; innserSet.add(element)
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;(elements: Collection&amp;lt;T&amp;gt;): Boolean {
        objectsAdded += elements.size
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; innserSet.addAll(elements)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; cset = CountingSet&amp;lt;Int&amp;gt;()
cset.addAll(listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${cset.objectsAdded}  objects were added, ${cset.size} remain&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//3  objects were added, 2 remain
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;44-object关键字将声明一个类与创建一个实例结合起来&#34;&gt;4.4 “object”关键字：将声明一个类与创建一个实例结合起来&lt;/h2&gt;
&lt;p&gt;Kotlin中object关键字在多种情况下出现，但是它们都遵循同样的核心概念：这个关键字定义一个类并同时创建一个实例。让我们来看看使用它的不同场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象声明时定义单例的一种方式。&lt;/li&gt;
&lt;li&gt;伴生对象可以持有工厂方法和其他与这个类相关，但在调用时并不依赖类实例的方法。它们的成员可以通过类名来访问。&lt;/li&gt;
&lt;li&gt;对象表达式用来替代Java的匿名内部类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;441对象声明创建单例易如反掌&#34;&gt;4.4.1对象声明：创建单例易如反掌&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Payroll&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; allEmployees = arrayListOf&amp;lt;Person&amp;gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculateSalary&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (person &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; allEmployees){

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对象声明通过object关键字引入。一个对象声明可以非常高效地以一句话来定义一个类和一个该类的变量。&lt;/p&gt;
&lt;p&gt;与类一样，一个对象声明也可以包含属性、方法、初始化语句块等的声明。唯一不允许的就是构造方法。与普通类的实例不同，对象声明在定义的时候就立即创建了，不需要在代码的其他地方调用构造方法。为对象声明定义一个构造方法是没有意义的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;Payroll.allEmployees.add(Person(...))
Payroll.calculateSalary()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对象声明同样可以继承自类和接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CaseInsensitiveFileComparator&lt;/span&gt;:Comparator&amp;lt;File&amp;gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compare&lt;/span&gt;(o1: File, o2: File): Int {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; o1.path.compareTo(o2.path,ignoreCase = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; files = listOf(File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Z&amp;#34;&lt;/span&gt;),File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/a&amp;#34;&lt;/span&gt;))
println(files.sortedWith(CaseInsensitiveFileComparator)) &lt;span style=&#34;color:#75715e&#34;&gt;//[/a, /Z]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样可以在类中声明对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NameComparator&lt;/span&gt; : Comparator&amp;lt;Person&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compare&lt;/span&gt;(o1: Person, o2: Person): Int =
                o1.name.compareTo(o2.name)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; persons = listOf(Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;),Person(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;))
println(persons.sortedWith(Person.NameComparator))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;442-伴生对象工厂方法和静态成员的地盘&#34;&gt;4.4.2 伴生对象：工厂方法和静态成员的地盘&lt;/h3&gt;
&lt;p&gt;Kotlin中的类不能拥有静态成员。在类中定义的对象使用关键字：companion，就获得了直接通过容器类名称来访问这个对象的方法和属性的能力。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;() {
            println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Companion object called&amp;#34;&lt;/span&gt;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;A.bar() &lt;span style=&#34;color:#75715e&#34;&gt;//Companion object called
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;伴生对象可以访问类中的所有private成员，包括private构造方法，它是实现工厂模式的理想选择。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname:String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(email:String){
        nickname = email.substringBefore(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(facebookAccountId:Int){
        nickname = getFacebookName(facebookAccountId)
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFacebookName&lt;/span&gt;(facebookAccountId:Int):String{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; facebookName:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; facebookName
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; nickname:String){
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newSubscribingUser&lt;/span&gt;(email:String) = User(email.substringBefore(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newFacebookUser&lt;/span&gt;(accountId:Int) = User(getFacebookName(accountId))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getFacebookName&lt;/span&gt;(facebookAccountId:Int):String{
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; facebookName:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; facebookName
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;443-作为普通对象使用的伴生对象&#34;&gt;4.4.3 作为普通对象使用的伴生对象&lt;/h3&gt;
&lt;p&gt;伴生对象是一个声明在类中的普通对象。它可以有名字，实现一个接口或者有扩展函数或属性。&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;声明一个命名伴生对象&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name:String){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; Loader{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fromJson&lt;/span&gt;(jsonText:String):Person = ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;在伴生对象中实现接口&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSONFactory&lt;/span&gt;&amp;lt;T&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fromJSON&lt;/span&gt;(jsonText: String):T
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name:String){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;companion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; :JSONFactory&amp;lt;Person&amp;gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fromJSON&lt;/span&gt;(jsonText: String): Person  = ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;如果你有一个函数使用抽象方法来加载实体，可以传给它Person对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loadFromJSON&lt;/span&gt;&amp;lt;T&amp;gt;(factory:JSONFactory&amp;lt;T&amp;gt;):T{
    &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
loadFromJSON(Person) &lt;span style=&#34;color:#75715e&#34;&gt;//Person类的名字被当做JSONFactory的实例
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;伴生对象扩展&#34;&gt;伴生对象扩展&lt;/h4&gt;
&lt;h3 id=&#34;444-对象表达式改变写法的匿名内部类&#34;&gt;4.4.4 对象表达式：改变写法的匿名内部类&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;window.addMouseListener(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MouseAdapter&lt;/span&gt;(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mouseClicked&lt;/span&gt;(e:MouseEvent){
            &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mouseEntered&lt;/span&gt;(e:MouseEvent){
            &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;从匿名对象访问局部变量&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countClicks&lt;/span&gt;(window:Window){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; clickCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    window.addMouseListener(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;:MouseAdapter(){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mouseClicked&lt;/span&gt;(e:MouseEvent){
            clickCount++
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
- https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter4/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>《Kotlin实战》读书笔记 第3章 函数的定义与调用</title>
        <link>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter3/</link>
        <pubDate>Sat, 25 Aug 2018 12:26:55 +0000</pubDate>
        
        <guid>https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter3/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter3/ -&lt;h2 id=&#34;31-在kotlin中创建集合&#34;&gt;3.1 在kotlin中创建集合&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; set = hashSetOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; list = arrayListOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; map = hashMapOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seven&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fifty-three&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//kotlin的javaClass等价于Java的getClass()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;.javaClass)  &lt;span style=&#34;color:#75715e&#34;&gt;//class java.util.HashSet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(list.javaClass) &lt;span style=&#34;color:#75715e&#34;&gt;//class java.util.ArrayList
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(map.javaClass) &lt;span style=&#34;color:#75715e&#34;&gt;//class java.util.HashMap
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Kotlin&lt;/code&gt;没有采用它自己的集合类，而是采用的标准的&lt;code&gt;Java&lt;/code&gt;集合类。&lt;code&gt;Kotlin&lt;/code&gt;可以更容易与Java代码交互。当从&lt;code&gt;Kotlin&lt;/code&gt;中调用&lt;code&gt;Java&lt;/code&gt;函数的时候，不用转换它的集合类来匹配&lt;code&gt;Java&lt;/code&gt;的类，反之亦然。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; strings = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fourteenth&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//获取最后一个元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(strings.last())
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; numbers = setOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//得到一个数字列表的最大值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(numbers.max())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;32-让函数更好调用&#34;&gt;3.2 让函数更好调用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;joinToString&lt;/span&gt;(collection:Collection&amp;lt;T&amp;gt;,separator:String,
prefix:String,postfix:String):String{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = StringBuilder(prefix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ((index,element) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; collection.withIndex()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(index&amp;gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) result.append(separator)
        result.append(element)
    }
    result.append(postfix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result.toString()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; list = listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
println(joinToString(list,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;321-命名参数&#34;&gt;3.2.1 命名参数&lt;/h3&gt;
&lt;p&gt;当调用一个&lt;code&gt;kotlin&lt;/code&gt;定义的函数时，可以显式地标明一些参数的名称。如果在调用一个函数时，指明一个参数的名称，为了避免混淆，那它之后的所有参数都要标明名称。当调用Java的函数时，不能采用命名参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt; println(joinToString(list,separator =&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;,prefix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;,postfix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;322-默认参数值&#34;&gt;3.2.2 默认参数值&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Kotlin&lt;/code&gt;中，可以在声明函数的时候，指定参数的默认值，这样就可以避免创建重载的函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;joinToString&lt;/span&gt;(collection:Collection&amp;lt;T&amp;gt;,
                     separator:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;,
                     prefix:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                     postfix:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):String{
   &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(joinToString(list)) &lt;span style=&#34;color:#75715e&#34;&gt;// 1,2,3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(joinToString(list,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//1;2;3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(joinToString(list,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//(1;2;3)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(joinToString(list,prefix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//(1,2,3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当使用常规的调用语法时，必须按照函数声明中定义的参数顺序来给定参数，可以省略的只有排在末尾的参数。如果使用命名参数，可以省略中间的一些参数，也可以以你想要的任意顺序只给定你需要的参数：&lt;/p&gt;
&lt;p&gt;当你从&lt;code&gt;Java&lt;/code&gt;中调用&lt;code&gt;Kotlin&lt;/code&gt;函数的时候必须显式地指定所有参数值。如果需要从Java代码中做频繁的调用，而且希望它能对&lt;code&gt;Java&lt;/code&gt;的调用者更简便，可以用&lt;code&gt;@JvmOverloads&lt;/code&gt;注解它。这个指示编译器生成如下重载函数。&lt;/p&gt;
&lt;p&gt;扩展函数需要进行导入才能使用它。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;323-消除静态工具类顶层函数和属性&#34;&gt;3.2.3 消除静态工具类：顶层函数和属性&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;声明joinToString()作为顶层函数&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; strings
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;joinToString&lt;/span&gt;(...): String{...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;这里它会编译成如下的Java代码：&lt;/p&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;代码清单对应的文件名称join.kt&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; strings&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JoinKt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;joinToString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(...){...}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;可以看到Kotlin编译生成的类的名称，对应于包含函数的文件的名称。这个文件中的所有顶层函数编译为这个类的静态函数。&lt;/p&gt;
&lt;p&gt;要改变包含Kotlin顶层函数的生成的类的名称，需要为这个文件添加@JvmName的注解，将其放到这个文件的开头，位于包名的前面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;@file:JvmName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;StringFunctions&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;package&lt;/span&gt; strings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;顶层属性&#34;&gt;顶层属性&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; UNIX_LINE_SEPARATOR = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;33-给别人的类添加方法扩展函数和属性&#34;&gt;3.3 给别人的类添加方法：扩展函数和属性&lt;/h2&gt;
&lt;p&gt;添加扩展函数就是把你要扩展的类或者接口的名称，放到即将添加的函数前面。这个类的名称被称为接收者类型；用来调用这个扩展函数的那个对象，叫做接收者对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;.lastChar(): Char = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.length-&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kotlin&amp;#34;&lt;/span&gt;.lastChar()) &lt;span style=&#34;color:#75715e&#34;&gt;// n
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在扩展函数中，可以像其他成员函数一样用this。而且也可以像普通的成员函数一样，省略它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;.lastChar(): Char = &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(length-&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在扩展函数中，可以直接访问被扩展的类的其他方法和属性，就好像是在这个类自己的方法中访问它们一样。和在类内部定义的方法不同的是，扩展函数不能访问私有的或者受保护的成员。�&lt;/p&gt;
&lt;h3 id=&#34;331-导入和扩展函数&#34;&gt;3.3.1 导入和扩展函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; strings.lastChar
&lt;span style=&#34;color:#75715e&#34;&gt;//import strings.* //也可以用*来导入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kotlin&amp;#34;&lt;/span&gt;.lastChar()) &lt;span style=&#34;color:#75715e&#34;&gt;// n
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以使用关键字as来修改导入的类或者函数名称，可以避免重名函数的冲突。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; strings.lastChar &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; last
println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kotlin&amp;#34;&lt;/span&gt;.last()) &lt;span style=&#34;color:#75715e&#34;&gt;// n
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;332-从java中调用扩展函数&#34;&gt;3.3.2 从Java中调用扩展函数&lt;/h3&gt;
&lt;p&gt;和顶层函数一样，包含这个函数的Java类的名称，是由这个函数声明的文件名称决定的。假设它声明在一个叫做StringUtil.kt的文件中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringUtilKt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lastChar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Java&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;333-作为扩展函数的工具函数&#34;&gt;3.3.3 作为扩展函数的工具函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Collection&lt;/span&gt;&amp;lt;T&amp;gt;.joinToString(
                     separator:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;,
                     prefix:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                     postfix:String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;):String{

    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; result = StringBuilder(prefix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ((index,element) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; withIndex()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(index&amp;gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) result.append(separator)
        result.append(element)
    }
    result.append(postfix)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result.toString()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; list = listOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
println(list.joinToString(separator = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;,prefix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;,postfix = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//(1;2;3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;扩展函数的静态性质也决定了扩展函数不能被子类重写。&lt;/p&gt;
&lt;h3 id=&#34;334-不可重写的扩展函数&#34;&gt;3.3.4 不可重写的扩展函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;View&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;View clicked&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;:View() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Button clicked&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; view:View = Button()
view.click() &lt;span style=&#34;color:#75715e&#34;&gt;//Button clicked
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;View&lt;/span&gt;.showoff() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m a view!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;.showoff() = println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m a button!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; view:View = Button()
view.showoff() &lt;span style=&#34;color:#75715e&#34;&gt;//I&amp;#39;m a view!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;334-扩展属性&#34;&gt;3.3.4 扩展属性&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;声明一个扩展属性&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; String.lastChar: Char
    &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;() = &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(length - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kotlin&amp;#34;&lt;/span&gt;.lastChar) &lt;span style=&#34;color:#75715e&#34;&gt;//n
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; sb = StringBuilder(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kotlin?&amp;#34;&lt;/span&gt;) 
sb.lastChar = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;
println(sb) &lt;span style=&#34;color:#75715e&#34;&gt;//Kotlin!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;34-处理集合可变参数中缀调用和库的支持&#34;&gt;3.4 处理集合：可变参数、中缀调用和库的支持&lt;/h2&gt;
&lt;h3 id=&#34;341-扩展java集合的api&#34;&gt;3.4.1 扩展Java集合的API&lt;/h3&gt;
&lt;h3 id=&#34;342-可变参数让函数支持任意数量的参数&#34;&gt;3.4.2 可变参数：让函数支持任意数量的参数&lt;/h3&gt;
&lt;p&gt;Kotlin可变参数是在参数上使用vararg修饰符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listOf&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;vararg&lt;/span&gt; elements: T): List&amp;lt;T&amp;gt;{...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;Java&lt;/code&gt;中可以按原样传递数组，而&lt;code&gt;kotlin&lt;/code&gt;则要求你显式地解包数组，以便每个数组元素在函数中能作为单独的参数来调用。从技术的角度来讲，这个功能被称为&lt;code&gt;展开运算符&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; list = listOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;args:&amp;#34;&lt;/span&gt;,*args)
    println(list) &lt;span style=&#34;color:#75715e&#34;&gt;//[args:, one, two, three]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;343-键值对的处理中缀调用和解构声明&#34;&gt;3.4.3 键值对的处理：中缀调用和解构声明&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; map = hashMapOf(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seven&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fifty-three&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这行代码中的单词to不是内置的结构，而是一种特殊的函数调用，被称为中缀调用。&lt;/p&gt;
&lt;p&gt;在中缀调用中，没有添加额外的分隔符，函数名称是直接放在目标对象名称和参数之间的。以下两种调用方式是等价的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;中缀调用可以与只有一个参数的函数一起使用，无论是普通的函数还是扩展函数。要允许使用中缀符号调用函数，需要使用infix修饰符来标记它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;infix&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;A, B&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.to(that: B): Pair&amp;lt;A, B&amp;gt; = Pair(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, that)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以直接用Pair的内容来初始化两个变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;number, name) = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个功能称为解构声明。用to函数创建一个pair，然后用解构声明来展开。&lt;/p&gt;
&lt;h2 id=&#34;35-字符串和正则表达式的处理&#34;&gt;3.5 字符串和正则表达式的处理&lt;/h2&gt;
&lt;h3 id=&#34;351-分割字符串&#34;&gt;3.5.1 分割字符串&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; strings&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12.345-6.A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;strings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java的split方法将一个正则表达式作为参数，并根据表达式将字符串分割成多个字符串。这里点（.）是表示任何字符的正则表达式。&lt;/p&gt;
&lt;p&gt;Kotlin把这个令人费解的函数隐藏了，作为替换，提供了一些名为split的，具有不同参数的重载的扩展函数。用来承载正则表达式的值需要一个Regex类型，而不是String，这样确保了当有一个字符串传递给这些函数的时候，不会被当做正则表达式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12.345-6.A&amp;#34;&lt;/span&gt;.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.|-&amp;#34;&lt;/span&gt;.toRegex())) &lt;span style=&#34;color:#75715e&#34;&gt;//[12, 345, 6, A]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kotlin中的split扩展函数的其他重载支持任意数量的纯文本字符串分隔符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12.345-6.A&amp;#34;&lt;/span&gt;.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;//[12, 345, 6, A]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;352-正则表达式和三重引号的字符串&#34;&gt;3.5.2 正则表达式和三重引号的字符串&lt;/h3&gt;
&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;使用String的扩展函数来解析文件路径&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parsePath&lt;/span&gt;(path: String) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; directory = path.substringBeforeLast(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fullName = path.substringAfterLast(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; fileName = fullName.substringBeforeLast(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; extension = fullName.substringAfterLast(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dir: $directory, name: $fileName, ext: $extension&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;h3 id=&#34;353-多行三重引号的字符串&#34;&gt;3.5.3 多行三重引号的字符串&lt;/h3&gt;
&lt;h2 id=&#34;36-让你的代码更简洁局部函数和扩展&#34;&gt;3.6 让你的代码更简洁：局部函数和扩展&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; id: Int, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; name: String, &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; address: String)

&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUser&lt;/span&gt;(user:User){
    &lt;span style=&#34;color:#75715e&#34;&gt;//重复的字段检查
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(user.name.isEmpty()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t save user ${user.id}:empty Name&amp;#34;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(user.address.isEmpty()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t save user ${user.id}:empty Address&amp;#34;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;//保存user到数据库
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% code-tabs %}
{% code-tabs-item title=&amp;quot;提取局部函数来避免重复&amp;rdquo; %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUser&lt;/span&gt;(user: User) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;(user: User,value: String, fieldName: String){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (value.isEmpty()) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t save user ${user.id}:empty $fieldName&amp;#34;&lt;/span&gt;)
        }
    }
    validate(user,user.name,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;)
    validate(user,user.address,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Address&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;//保存user到数据库
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% endcode-tabs-item %}
{% endcode-tabs %}&lt;/p&gt;
&lt;p&gt;因为局部函数可以访问所在函数中的所有参数和变量。我们可以利用这一点，去冗余的User参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUser&lt;/span&gt;(user: User) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;(value: String, fieldName: String){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (value.isEmpty()) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t save user ${user.id}:empty $fieldName&amp;#34;&lt;/span&gt;)
        }
    }
    validate(user.name,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;)
    validate(user.address,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Address&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;//保存user到数据库
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;.validateBeforeSave(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;(value: String, fieldName: String){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (value.isEmpty()) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalArgumentException(
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can&amp;#39;t save user $id:empty $fieldName&amp;#34;&lt;/span&gt;)
        }
    }
    validate(name,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;)
    validate(address,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Address&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;saveUser&lt;/span&gt;(user: User) {
    user.validateBeforeSave()
    &lt;span style=&#34;color:#75715e&#34;&gt;//保存user到数据库
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://malinkang.cn/kotlin-in-action/kotlin-in-action-chapter3/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Paging 库概述</title>
        <link>https://malinkang.cn/posts/paging-library-overview/</link>
        <pubDate>Fri, 27 Jul 2018 14:44:49 +0000</pubDate>
        
        <guid>https://malinkang.cn/posts/paging-library-overview/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/posts/paging-library-overview/ -&lt;p&gt;分页库可帮助您一次加载和显示小块数据。按需加载部分数据可减少网络带宽和系统资源的使用。&lt;/p&gt;
&lt;p&gt;在应用程序或模块的&lt;code&gt;build.gradle&lt;/code&gt;文件中添加所需的依赖项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; paging_version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.1.0&amp;#34;&lt;/span&gt;

    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;androidx.paging:paging-runtime:$paging_version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// For Kotlin use paging-runtime-ktx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// alternatively - without Android dependencies for testing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    testImplementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;androidx.paging:paging-common:$paging_version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// For Kotlin use paging-common-ktx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// optional - RxJava support
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;androidx.paging:paging-rxjava2:$paging_version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// For Kotlin use paging-rxjava2-ktx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;库架构&#34;&gt;库架构&lt;/h1&gt;
&lt;h2 id=&#34;pagedlist&#34;&gt;PagedList&lt;/h2&gt;
&lt;p&gt;分页库的关键组件是&lt;code&gt;PagedList&lt;/code&gt;类，它加载应用程序数据或页面的块。由于需要更多数据，因此将其分页到现有的&lt;code&gt;PagedList&lt;/code&gt;对象中。如果任何加载的数据发生更改，则会从&lt;code&gt;LiveData&lt;/code&gt;或基于&lt;code&gt;RxJava2&lt;/code&gt;的对象向可观察数据持有者发出新的&lt;code&gt;PagedList&lt;/code&gt;实例。生成&lt;code&gt;PagedList&lt;/code&gt;对象时，应用程序的UI会显示其内容，同时遵循UI控制器的生命周期。&lt;/p&gt;
&lt;p&gt;以下代码段显示了如何使用&lt;code&gt;PagedList&lt;/code&gt;对象的&lt;code&gt;LiveData&lt;/code&gt;持有者配置应用程序的视图模型以加载和显示数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertViewModel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ViewModel &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertDao concertDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; LiveData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PagedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; concertList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Creates a PagedList object with 50 items per page.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertViewModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConcertDao concertDao&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertDao&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; concertDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        concertList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LivePagedListBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                concertDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 50&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据&#34;&gt;数据&lt;/h2&gt;
&lt;p&gt;PagedList的每个实例都从其DataSource加载应用程序数据的最新快照。数据从应用程序的后端或数据库流入PagedList对象。&lt;/p&gt;
&lt;p&gt;以下示例使用Room持久性库来组织应用程序的数据，但如果要使用其他方法存储数据，还可以提供自己的数据源工厂。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Dao&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertDao&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// The Integer type parameter tells Room to use a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// PositionalDataSource object.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM concerts ORDER BY date DESC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    DataSource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;界面&#34;&gt;界面&lt;/h2&gt;
&lt;p&gt;PagedList类与PagedListAdapter一起使用，可以将项目加载到RecyclerView中。这些类一起工作以在加载内容时获取和显示内容，预取视图外内容并动画内容更改。&lt;/p&gt;
&lt;p&gt;分页库实现了应用程序体系结构指南中建议的观察者模式。特别是，库的核心组件创建了一个UI可以观察的LiveData &lt;!-- raw HTML omitted --&gt;（或等效的基于RxJava2的类）的实例。然后，您的应用程序的UI可以在生成PagedList对象时显示内容，同时尊重UI控制器的生命周期。&lt;/p&gt;
&lt;h1 id=&#34;支持不同的数据架构&#34;&gt;支持不同的数据架构&lt;/h1&gt;
&lt;p&gt;图1显示了每种架构方案中数据的流动方式。对于仅限网络或仅限数据库的解决方案，数据直接流向应用程序的UI模型。如果您使用的是组合方法，则数据会从后端服务器流入设备上的数据库，然后流入应用程序的UI模型。每隔一段时间，每个数据流的端点就会耗尽要加载的数据，此时它会从提供数据的组件请求更多数据。例如，当设备上数据库用完数据时，它会从服务器请求更多数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../assets/paging-library-data-flow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们提供了用于不同数据架构的推荐模式的示例。要查看它们，请参阅GitHub上的PagingWithNetwork示例。&lt;/p&gt;
&lt;h2 id=&#34;network-only&#34;&gt;Network only&lt;/h2&gt;
&lt;p&gt;要显示来自后端服务器的数据，请使用Retrofit API的同步版本将信息加载到您自己的自定义DataSource对象中。&lt;/p&gt;
&lt;h2 id=&#34;database-only&#34;&gt;Database only&lt;/h2&gt;
&lt;p&gt;设置RecyclerView以观察本地存储，最好使用Room persistence library。这样，无论何时在应用程序的数据库中插入或修改数据，这些更改都会自动反映在显示此数据的RecyclerView中。&lt;/p&gt;
&lt;h2 id=&#34;network-and-database&#34;&gt;Network and database&lt;/h2&gt;
&lt;p&gt;在开始观察数据库之后，可以使用PagedList.BoundaryCallback监听数据库何时没有数据。然后，您可以从网络中获取更多项目并将其插入数据库。如果您的UI正在观察数据库，那就是您需要做的。&lt;/p&gt;
&lt;h1 id=&#34;处理网络错误&#34;&gt;处理网络错误&lt;/h1&gt;
&lt;p&gt;当使用网络获取或分页您正在使用分页库显示的数据时，重要的是不要将网络视为“可用”或“不可用”，因为许多连接是间歇性的或片状的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特定服务器可能无法响应网络请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备可能连接到缓慢或弱的网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相反，您的应用应检查每个失败请求，并在网络不可用的情况下尽可能优雅地恢复。例如，您可以提供“重试”按钮，供用户选择数据刷新步骤是否不起作用。如果在数据分页步骤期间发生错误，则最好自动重试分页请求。&lt;/p&gt;
&lt;h1 id=&#34;更新已经存在的app&#34;&gt;更新已经存在的app&lt;/h1&gt;
&lt;p&gt;如果您的应用已经消耗了数据库或后端源中的数据，则可以直接升级到分页库提供的功能。本节介绍如何升级具有通用现有设计的应用程序。&lt;/p&gt;
&lt;h2 id=&#34;定制分页解决方案&#34;&gt;定制分页解决方案&lt;/h2&gt;
&lt;p&gt;如果使用自定义功能从应用程序的数据源加载小的数据子集，则可以将此逻辑替换为PagedList类中的逻辑。 PagedList的实例提供与公共数据源的内置连接。这些实例还为您可能包含在应用程序UI中的RecyclerView对象提供适配器。&lt;/p&gt;
&lt;h2 id=&#34;使用列表而不是页面加载数据&#34;&gt;使用列表而不是页面加载数据&lt;/h2&gt;
&lt;p&gt;如果使用内存列表作为UI适配器的后备数据结构，请考虑如果列表中的项目数可能变大，则使用PagedList类观察数据更新。 &lt;code&gt;PagedList&lt;/code&gt;的实例可以使用&lt;code&gt;LiveData &amp;lt;PagedList&amp;gt;&lt;/code&gt;或&lt;code&gt;Observable &amp;lt;List&amp;gt;&lt;/code&gt;将数据更新传递到应用程序的UI，从而最大限度地减少加载时间和内存使用量。更好的是，在应用程序中用&lt;code&gt;PagedList&lt;/code&gt;对象替换&lt;code&gt;List&lt;/code&gt;对象不需要对应用程序的UI结构或数据更新逻辑进行任何更改。&lt;/p&gt;
&lt;h2 id=&#34;使用cursoradapter将数据光标与列表视图相关联&#34;&gt;使用CursorAdapter将数据光标与列表视图相关联&lt;/h2&gt;
&lt;p&gt;您的应用程序可能使用CursorAdapter将Cursor中的数据与ListView相关联。在这种情况下，您通常需要从ListView迁移到RecyclerView作为应用程序的列表UI容器，然后将Cursor组件替换为Room或PositionalDataSource，具体取决于Cursor实例是否访问SQLite数据库。&lt;/p&gt;
&lt;p&gt;在某些情况下，例如在处理Spinner实例时，您只提供适配器本身。然后，库将获取加载到该适配器中的数据并为您显示数据。在这些情况下，将适配器数据的类型更改为LiveData &lt;!-- raw HTML omitted --&gt;，然后在尝试让库类在UI中对这些项进行&lt;code&gt;inflate&lt;/code&gt;之前，将此列表包装在ArrayAdapter对象中。&lt;/p&gt;
&lt;h2 id=&#34;使用asynclistutil异步加载内容&#34;&gt;使用AsyncListUtil异步加载内容&lt;/h2&gt;
&lt;p&gt;如果您使用AyncListUtil对象异步加载和显示信息组，则分页库可让您更轻松地加载数据：&lt;/p&gt;
&lt;p&gt;您的数据不需要是位置的。分页库允许您使用网络提供的密钥直接从后端加载数据。&lt;/p&gt;
&lt;p&gt;您的数据可能非常大。使用分页库，您可以将数据加载到页面中，直到没有剩余数据。&lt;/p&gt;
&lt;p&gt;您可以更轻松地观察数据。 Paging库可以显示应用程序的ViewModel在可观察数据结构中保存的数据。&lt;/p&gt;
&lt;h1 id=&#34;数据库示例&#34;&gt;数据库示例&lt;/h1&gt;
&lt;p&gt;以下代码片段显示了将所有部分协同工作的几种可能方法。&lt;/p&gt;
&lt;h2 id=&#34;使用livedata观察分页数据&#34;&gt;使用LiveData观察分页数据&lt;/h2&gt;
&lt;p&gt;以下代码段显示了所有协同工作。随着在数据库中添加，删除或更改音乐会事件，RecyclerView中的内容将自动且有效地更新：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Dao&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertDao&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// The Integer type parameter tells Room to use a PositionalDataSource
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// object, with position-based loading under the hood.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM concerts ORDER BY date DESC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    DataSource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertViewModel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ViewModel &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertDao mConcertDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; LiveData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PagedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; concertList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertViewModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConcertDao concertDao&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        mConcertDao &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; concertDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    concertList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LivePagedListBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
            mConcertDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* page size */&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AppCompatActivity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConcertViewModel viewModel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
                ViewModelProviders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConcertViewModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        RecyclerView recyclerView &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findViewById&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concert_list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        ConcertAdapter adapter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcertAdapter&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        viewModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;observe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; adapter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;submitList&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        recyclerView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAdapter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;adapter&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertAdapter&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; PagedListAdapter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ConcertViewHolder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertAdapter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DIFF_CALLBACK&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onBindViewHolder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; ConcertViewHolder holder&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; position&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Concert concert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getItem&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;concert &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            holder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;concert&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// Null defines a placeholder item - PagedListAdapter automatically
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// invalidates this row when the actual object is loaded from the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// database.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            holder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; DiffUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ItemCallback&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DIFF_CALLBACK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DiffUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ItemCallback&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Concert details may have changed if reloaded from the database,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// but ID is fixed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;areItemsTheSame&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Concert oldConcert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert newConcert&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; oldConcert&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; newConcert&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;areContentsTheSame&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Concert oldConcert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                Concert newConcert&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; oldConcert&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newConcert&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用rxjava2观察分页数据&#34;&gt;使用RxJava2观察分页数据&lt;/h2&gt;
&lt;p&gt;如果您更喜欢使用RxJava2而不是LiveData，则可以创建一个Observable或Flowable对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertViewModel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ViewModel &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertDao mConcertDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Flowable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PagedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; concertList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertViewModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConcertDao concertDao&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        mConcertDao &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; concertDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        concertList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RxPagedListBuilder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                mConcertDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* page size */&lt;/span&gt; 50&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buildFlowable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BackpressureStrategy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LATEST&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，您可以使用以下代码段中的代码开始和停止观察数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AppCompatActivity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertAdapter mAdapter&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertViewModel mViewModel&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; CompositeDisposable mDisposable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CompositeDisposable&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        RecyclerView recyclerView &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findViewById&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concert_list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        mViewModel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ViewModelProviders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConcertViewModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        mAdapter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcertAdapter&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        recyclerView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAdapter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mAdapter&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        mDisposable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mViewModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                flowableList &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; mAdapter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;submitList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;flowableList&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onStop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onStop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        mDisposable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于基于RxJava2的解决方案，ConcertDao和ConcertAdapter的代码与基于LiveData的解决方案的代码相同。&lt;/p&gt;
&lt;h1 id=&#34;展示分页数据&#34;&gt;展示分页数据&lt;/h1&gt;
&lt;h2 id=&#34;将ui连接到viewmodel&#34;&gt;将UI连接到ViewModel&lt;/h2&gt;
&lt;p&gt;您可以将&lt;code&gt;LiveData &amp;lt;PagedList&amp;gt;&lt;/code&gt;的实例连接到&lt;code&gt;PagedListAdapter&lt;/code&gt;，如以下代码段所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AppCompatActivity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertAdapter adapter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcertAdapter&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ConcertViewModel viewModel&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        viewModel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ViewModelProviders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConcertViewModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        viewModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;observe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; adapter&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;submitList&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当数据源提供PagedList的新实例时，&lt;code&gt;activity&lt;/code&gt;会将这些对象发送到适配器。 PagedListAdapter实现定义了如何计算更新，并自动处理分页和列表差异。因此，您的ViewHolder只需要绑定到特定提供的&lt;code&gt;item&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertAdapter&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; PagedListAdapter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ConcertViewHolder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertAdapter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DIFF_CALLBACK&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onBindViewHolder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; ConcertViewHolder holder&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; position&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Concert concert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getItem&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// Note that &amp;#34;concert&amp;#34; can be null if it&amp;#39;s a placeholder.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        holder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;concert&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; DiffUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ItemCallback&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DIFF_CALLBACK
            &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// See Implement the diffing callback section.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PagedListAdapter使用PagedList.Callback对象处理页面加载事件。当用户滚动时，PagedListAdapter调用PagedList.loadAround()以向底层的PagedList提供关于它应该从DataSource获取哪些项的提示。&lt;/p&gt;
&lt;p&gt;注意：PagedList是内容不可变的。这意味着，虽然可以将新内容加载到PagedList的实例中，但加载的项本身一旦加载就无法更改。因此，如果PagedList中的内容更新，则PagedListAdapter对象将接收包含更新信息的全新PagedList。&lt;/p&gt;
&lt;h2 id=&#34;实现diff-callback&#34;&gt;实现DIFF CALLBACK&lt;/h2&gt;
&lt;p&gt;以下示例显示了&lt;code&gt;areContentsTheSame()&lt;/code&gt;的手动实现，它比较了相关的对象字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; DiffUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ItemCallback&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DIFF_CALLBACK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DiffUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ItemCallback&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;areItemsTheSame&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Concert oldItem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert newItem&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// The ID property identifies when items are the same.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; oldItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; newItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;areContentsTheSame&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Concert oldItem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert newItem&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Don&amp;#39;t use the &amp;#34;==&amp;#34; operator here. Either implement and use .equals(),
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// or write custom data comparison logic here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; oldItem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newItem&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于适配器包含比较项的定义，因此适配器会在加载新的PagedList对象时自动检测对这些项的更改。因此，适配器会在RecyclerView对象中触发高效的&lt;code&gt;item&lt;/code&gt;动画。&lt;/p&gt;
&lt;h2 id=&#34;使用不同的适配器类型进行区分&#34;&gt;使用不同的适配器类型进行区分&lt;/h2&gt;
&lt;p&gt;如果您选择不从PagedListAdapter继承 - 例如当您使用提供自己的适配器的库时 - 您仍然可以通过直接使用AsyncPagedListDiffer对象来使用Paging Library适配器的diffing功能。&lt;/p&gt;
&lt;h2 id=&#34;在ui中提供占位符&#34;&gt;在UI中提供占位符&lt;/h2&gt;
&lt;p&gt;如果您希望UI在应用程序完成获取数据之前显示列表，您可以向用户显示占位符列表项。 PagedList通过将列表项数据显示为null来处理这种情况，直到加载数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：默认情况下，分页库启用此占位符行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;占位符具有以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持滚动条：PagedList为PagedListAdapter提供列表项的数量。此信息允许适配器绘制一个滚动条，传达列表的完整大小。加载新页面时，滚动条不会跳转，因为列表不会更改大小。&lt;/li&gt;
&lt;li&gt;无需加载微调器：由于列表大小已知，因此无需提醒用户正在加载更多项目。占位符本身传达了这些信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，在添加对占位符的支持之前，请记住以下前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要可数数据集：Room持久性库中的DataSource实例可以有效地计算其项目。但是，如果您使用的是自定义本地存储解决方案或仅限网络的数据体系结构，则确定数据集中包含的项目数量可能很昂贵甚至无法实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要适配器来考虑卸载的项目：用于准备通胀列表的适配器或表示机制需要处理空列表项。例如，将数据绑定到ViewHolder时，需要提供默认值来表示卸载的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要相同大小的项目视图：如果列表项目大小可以根据其内容（例如社交网络更新）进行更改，则项目之间的交叉淡化看起来不太好。我们强烈建议在这种情况下禁用占位符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;收集分页数据&#34;&gt;收集分页数据&lt;/h1&gt;
&lt;h2 id=&#34;构造一个可观察的列表&#34;&gt;构造一个可观察的列表&lt;/h2&gt;
&lt;p&gt;通常，您的UI代码会观察LiveData &lt;!-- raw HTML omitted --&gt;对象（或者，如果您使用的是RxJava2，则为Flowable &lt;!-- raw HTML omitted --&gt;或Observable &lt;!-- raw HTML omitted --&gt;对象），该对象位于应用程序的ViewModel中。此可观察对象在应用程序列表数据的表示和内容之间形成连接。&lt;/p&gt;
&lt;p&gt;为了创建这些可观察的PagedList对象之一，将DataSource.Factory的实例传递给LivePagedListBuilder或RxPagedListBuilder对象。 DataSource对象加载单个PagedList的页面。工厂类创建PagedList的新实例以响应内容更新，例如数据库表失效和网络刷新。&lt;/p&gt;
&lt;p&gt;Room持久性库可以为您提供DataSource.Factory对象，或者您可以构建自己的对象。
以下代码段显示了如何使用Room的DataSource.Factory构建功能在应用程序的ViewModel类中创建LiveData &lt;!-- raw HTML omitted --&gt;的新实例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConcertDao&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Dao&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcertDao&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// The Integer type parameter tells Room to use a PositionalDataSource
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// object, with position-based loading under the hood.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM concerts ORDER BY date DESC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    DataSource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ConcertViewModel&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The Integer type argument corresponds to a PositionalDataSource object.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DataSource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; myConcertDataSource &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
       concertDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concertsByDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

LiveData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PagedList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Concert&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; concertList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
        LivePagedListBuilder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;myConcertDataSource&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* page size */&lt;/span&gt; 50&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自定义分页配置&#34;&gt;自定义分页配置&lt;/h2&gt;- https://malinkang.cn/posts/paging-library-overview/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Dagger2在Android中的使用</title>
        <link>https://malinkang.cn/posts/dagger-android/</link>
        <pubDate>Wed, 25 Jul 2018 11:56:12 +0800</pubDate>
        
        <guid>https://malinkang.cn/posts/dagger-android/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/posts/dagger-android/ -&lt;p&gt;与其他大多数依赖注入框架相比，&lt;code&gt;Dagger2&lt;/code&gt;的主要优点之一是其严格生成的实现（无反射）意味着它可以在&lt;code&gt;Android&lt;/code&gt;应用程序中使用。但是，在&lt;code&gt;Android&lt;/code&gt;应用程序中使用&lt;code&gt;Dagger&lt;/code&gt;时仍有一些注意事项。&lt;/p&gt;
&lt;p&gt;原文：https://google.github.io/dagger/android&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Dagger&lt;/code&gt;编写&lt;code&gt;Android&lt;/code&gt;应用程序的主要困难之一是很多&lt;code&gt;Android&lt;/code&gt;框架类都是由操作系统本身实例化的，例如&lt;code&gt;Activity&lt;/code&gt;和&lt;code&gt;Fragment&lt;/code&gt;，但是如果&lt;code&gt;Dagger&lt;/code&gt;可以创建所有注入的对象，则&lt;code&gt;Dagger&lt;/code&gt;的效果最好。相反，您必须在生命周期方法中执行成员注入。这意味着许多类最终看起来像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FrombulationActivity&lt;/span&gt; extends Activity {
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;Inject Frombulator frombulator;

  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;Override
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    &lt;span style=&#34;color:#75715e&#34;&gt;// DO THIS FIRST. Otherwise frombulator might be null!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ((SomeApplicationBaseType) getContext().getApplicationContext())
        .getApplicationComponent()
        .newActivityComponentBuilder()
        .activity(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)
        .build()
        .inject(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// ... now you can write the exciting code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;注入activity对象&#34;&gt;注入Activity对象&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在您的应用程序组件中安装&lt;code&gt;AndroidInjectionModule&lt;/code&gt;以确保这些基本类型所需的所有绑定都可用。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Singleton&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
    modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
        AndroidInjectionModule&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//安装AndroidInjectionModule
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        AppModule&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        MainActivityModule&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;class&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppComponent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Component.Builder&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;@BindsInstance&lt;/span&gt;
        fun &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Application&lt;span style=&#34;color:#f92672&#34;&gt;):&lt;/span&gt; Builder

        fun &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;():&lt;/span&gt; AppComponent
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//注入App
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    fun &lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;githubApp&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; GithubApp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;首先编写一个实现&lt;code&gt;AndroidInjector&amp;lt;YourActivity&amp;gt;&lt;/code&gt;的&lt;code&gt;@Subcomponent&lt;/code&gt;和一个继承&lt;code&gt;AndroidInjector.Builder&amp;lt;YourActivity&amp;gt;&lt;/code&gt;的&lt;code&gt;@Subcomponent.Builder&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Subcomponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourActivitySubcomponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;YourActivity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Subcomponent.Builder&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;YourActivity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义子组件后，通过定义一个绑定子组件层次结构并将其添加到注入应用程序的组件的模块，将其添加到组件层次结构中。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Module&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;subcomponents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; YourActivitySubcomponent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourActivityModule&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Binds&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@IntoMap&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@ActivityKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;YourActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Activity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;bindYourActivityInjectorFactory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;YourActivitySubcomponent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...,&lt;/span&gt; YourActivityModule&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourApplicationComponent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;专业提示：如果您的子组件及其构建器没有第2步中提到的其他方法或超类型，您可以使用&lt;code&gt;@ContributesAndroidInjector&lt;/code&gt;为您生成它们。添加一个抽象模块方法，该方法返回您的活动，使用@ContributesAndroidInjector对其进行注释，并指定要安装到子组件中的模块，而不是步骤2和3。如果子组件需要作用域，则也可以将范围注释应用于该方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ActivityScope&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ContributesAndroidInjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* modules to install into the subcomponent */&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; YourActivity &lt;span style=&#34;color:#a6e22e&#34;&gt;contributeYourActivityInjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;接下来，让您的&lt;code&gt;Application&lt;/code&gt;实现&lt;code&gt;HasActivityInjector&lt;/code&gt;并且&lt;code&gt;@Inject&lt;/code&gt;一个从&lt;code&gt;activityInjector()&lt;/code&gt;方法返回的&lt;code&gt;DispatchingAndroidInjector&amp;lt;Activity&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourApplication&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Application &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HasActivityInjector &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Inject&lt;/span&gt; DispatchingAndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Activity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dispatchingActivityInjector&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    DaggerYourApplicationComponent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Activity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;activityInjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dispatchingActivityInjector&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;最终，在你的&lt;code&gt;Activity.onCreate()&lt;/code&gt;方法中，在调用&lt;code&gt;super.onCreate();&lt;/code&gt;之前调用&lt;code&gt;AndroidInjection.inject(this)&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    AndroidInjection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;如何工作&#34;&gt;如何工作&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;AndroidInjection.inject()&lt;/code&gt;从&lt;code&gt;Application&lt;/code&gt;中获取一个&lt;code&gt;DispatchingAndroidInjector&amp;lt;Activity&amp;gt;&lt;/code&gt;并且传递你的&lt;code&gt;activity&lt;/code&gt;到&lt;code&gt;inject(this)&lt;/code&gt;。&lt;code&gt;DispatchingAndroidInjector&lt;/code&gt;为您的Activity类（它是YourActivitySubcomponent.Builder）查找&lt;code&gt;AndroidInjector.Factory&lt;/code&gt;，创建&lt;code&gt;AndroidInjector（它是YourActivitySubcomponent）&lt;/code&gt;，并将您的Activity传递给&lt;code&gt;inject（YourActivity）&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AndroidInjection&lt;/code&gt;的&lt;code&gt;inject&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Injects {@code activity} if an associated {@link AndroidInjector} implementation can be found,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * otherwise throws an {@link IllegalArgumentException}.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @throws RuntimeException if the {@link Application} doesn&amp;#39;t implement {@link
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     HasActivityInjector}.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Activity activity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  checkNotNull&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;activity&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;activity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  Application application &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; activity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getApplication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!(&lt;/span&gt;application &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; HasActivityInjector&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s does not implement %s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCanonicalName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
            HasActivityInjector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCanonicalName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Activity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; activityInjector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;HasActivityInjector&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; application&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;activityInjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  checkNotNull&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;activityInjector&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s.activityInjector() returned null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

  activityInjector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;activity&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;注入fragment对象&#34;&gt;注入Fragment对象&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Injecting a Fragment is just as simple as injecting an Activity. Define your subcomponent in the same way, replacing Activity type parameters with Fragment, @ActivityKey with @FragmentKey, and HasActivityInjector with HasFragmentInjector.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注入一个&lt;code&gt;Fragment&lt;/code&gt;像注入一个&lt;code&gt;Activity&lt;/code&gt;一样简单。以相同的方式定义你的&lt;code&gt;subcomponent&lt;/code&gt;，使用&lt;code&gt;Fragment&lt;/code&gt;替换&lt;code&gt;Activity&lt;/code&gt;，&lt;code&gt;@FragmentKey&lt;/code&gt;替换&lt;code&gt;@ActivityKey&lt;/code&gt;,&lt;code&gt;HasFragmentInjector&lt;/code&gt;替换&lt;code&gt;HasActivityInjector&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of injecting in onCreate() as is done for Activity types, inject Fragments to in onAttach().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不像在&lt;code&gt;Activity&lt;/code&gt;类型中那样在&lt;code&gt;onCreate()&lt;/code&gt;中注入，而是在&lt;code&gt;onAttach()&lt;/code&gt;中注入&lt;code&gt;Fragment&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike the modules defined for Activitys, you have a choice of where to install modules for Fragments. You can make your Fragment component a subcomponent of another Fragment component, an Activity component, or the Application component — it all depends on which other bindings your Fragment requires. After deciding on the component location, make the corresponding type implement HasFragmentInjector. For example, if your Fragment needs bindings from YourActivitySubcomponent, your code will look something like this:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与为&lt;code&gt;Activity&lt;/code&gt;定义的模块不同，您可以选择在哪里为&lt;code&gt;Fragments&lt;/code&gt;安装模块。你可以让你的&lt;code&gt;Fragment&lt;/code&gt;组件成为另一个&lt;code&gt;Fragment&lt;/code&gt;子组件，&lt;code&gt;Activity&lt;/code&gt;组件或&lt;code&gt;Application&lt;/code&gt;组件的一个子组件 - 这一切都取决于你的&lt;code&gt;Fragment&lt;/code&gt;需要的其他绑定。确定组件位置后，使相应的类型实现&lt;code&gt;HasFragmentInjector&lt;/code&gt;。例如，如果您的&lt;code&gt;Fragment&lt;/code&gt;需要来自&lt;code&gt;YourActivitySubcomponent&lt;/code&gt;的绑定，那么您的代码将如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Activity
    &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HasFragmentInjector &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Inject&lt;/span&gt; DispatchingAndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Fragment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fragmentInjector&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    AndroidInjection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Fragment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fragmentInjector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fragmentInjector&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourFragment&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Fragment &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Inject&lt;/span&gt; SomeDependency someDep&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Activity activity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    AndroidInjection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;activity&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Subcomponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourFragmentSubcomponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;YourFragment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Subcomponent.Builder&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;YourFragment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Module&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;subcomponents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; YourFragmentSubcomponent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourFragmentModule&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Binds&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@IntoMap&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@FragmentKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;YourFragment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; AndroidInjector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Fragment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;bindYourFragmentInjectorFactory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;YourFragmentSubcomponent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; builder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Subcomponent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; YourFragmentModule&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;YourActivityOrYourApplicationComponent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本框架类型&#34;&gt;基本框架类型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Because DispatchingAndroidInjector looks up the appropriate AndroidInjector.Factory by the class at runtime, a base class can implement HasActivityInjector/HasFragmentInjector/etc as well as call AndroidInjection.inject(). All each subclass needs to do is bind a corresponding @Subcomponent. Dagger provides a few base types that do this, such as DaggerActivity and DaggerFragment, if you don’t have a complicated class hierarchy. Dagger also provides a DaggerApplication for the same purpose — all you need to do is to extend it and override the applicationInjector() method to return the component that should inject the Application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为&lt;code&gt;DispatchingAndroidInjector&lt;/code&gt;在运行时按类查找适当的&lt;code&gt;AndroidInjector.Factory&lt;/code&gt;，所以基类可以实现&lt;code&gt;HasActivityInjector&lt;/code&gt;、&lt;code&gt;HasFragmentInjectoretc&lt;/code&gt;等等以及调用&lt;code&gt;AndroidInjection.inject()&lt;/code&gt;。每个子类都需要做的就是绑定一个对应的&lt;code&gt;@Subcomponent&lt;/code&gt;。如果您没有复杂的类层次结构，&lt;code&gt;Dagger&lt;/code&gt;会提供一些基本类型，例如&lt;code&gt;DaggerActivity&lt;/code&gt;和&lt;code&gt;DaggerFragment&lt;/code&gt;。Dagger还为同样的目的提供了一个DaggerApplication你需要做的就是扩展它并覆盖applicationInjector()方法来返回应该注入应用程序的组件。&lt;/p&gt;
&lt;p&gt;以下类型也包括在内：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DaggerService和DaggerIntentService&lt;/li&gt;
&lt;li&gt;DaggerBroadcastReceiver&lt;/li&gt;
&lt;li&gt;DaggerContentProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: DaggerBroadcastReceiver should only be used when the BroadcastReceiver is registered in the AndroidManifest.xml. When the BroadcastReceiver is created in your own code, prefer constructor injection instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意：DaggerBroadcastReceiver只能在AndroidManifest.xml中注册BroadcastReceiver时使用。在您自己的代码中创建BroadcastReceiver时，请改为使用构造函数注入。&lt;/p&gt;
&lt;h3 id=&#34;支持库&#34;&gt;支持库&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;For users of the Android support library, parallel types exist in the dagger.android.support package. Note that while support Fragment users have to bind AndroidInjector.Factory&amp;lt;? extends android.support.v4.app.Fragment&amp;gt;, AppCompat users should continue to implement AndroidInjector.Factory&amp;lt;? extends Activity&amp;gt; and not &amp;lt;? extends AppCompatActivity&amp;gt; (or FragmentActivity).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于Android支持库的用户，&lt;code&gt;dagger.android.support&lt;/code&gt;包中存在并行类型。请注意，尽管支持&lt;code&gt;Fragment&lt;/code&gt;的用户必须绑定&lt;code&gt;AndroidInjector.Factory &amp;lt;？extends android.support.v4.app.Fragment&amp;gt;&lt;/code&gt;，&lt;code&gt;AppCompat&lt;/code&gt;用户应该继续实现&lt;code&gt;AndroidInjector.Factory &amp;lt;？extends Activity&amp;gt;&lt;/code&gt;而不是&lt;code&gt;&amp;lt;？extends AppCompatActivity&amp;gt;&lt;/code&gt;（或FragmentActivity）。&lt;/p&gt;
&lt;h3 id=&#34;如何获取它&#34;&gt;如何获取它&lt;/h3&gt;
&lt;p&gt;将以下内容添加到您的build.gradle中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  compile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.google.dagger:dagger-android:2.x&amp;#39;&lt;/span&gt;
  compile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.google.dagger:dagger-android-support:2.x&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// if you use the support libraries
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  annotationProcessor &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.google.dagger:dagger-android-processor:2.x&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;何时注入&#34;&gt;何时注入&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Constructor injection is preferred whenever possible because javac will ensure that no field is referenced before it has been set, which helps avoid NullPointerExceptions. When members injection is required (as discussed above), prefer to inject as early as possible. For this reason, DaggerActivity calls AndroidInjection.inject() immediately in onCreate(), before calling super.onCreate(), and DaggerFragment does the same in onAttach(), which also prevents inconsistencies if the Fragment is reattached.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要有可能，构造函数注入是首选，因为javac将确保没有字段在被设置之前被引用，这有助于避免NullPointerException。 当需要成员注射（如上所述）时，倾向于尽早注射。 出于这个原因，DaggerActivity在调用&lt;code&gt;super.onCreate()&lt;/code&gt;之前立即在&lt;code&gt;onCreate()&lt;/code&gt;中调用AndroidInjection.inject()，并且DaggerFragment在onAttach()中也是这样做的，这也可以防止在重新连接片段时出现不一致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is crucial to call AndroidInjection.inject() before super.onCreate() in an Activity, since the call to super attaches Fragments from the previous activity instance during configuration change, which in turn injects the Fragments. In order for the Fragment injection to succeed, the Activity must already be injected. For users of ErrorProne, it is a compiler error to call AndroidInjection.inject() after super.onCreate().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Activity中的super.onCreate()之前调用AndroidInjection.inject()是非常重要的，因为超级调用在配置更改期间将前一个活动实例的碎片连接到Fragments，而这又会导致碎片。 为了使片段注入成功，该活动必须已经被注入。 对于ErrorProne的用户，在super.onCreate()之后调用AndroidInjection.inject()是一个编译器错误。&lt;/p&gt;
&lt;h3 id=&#34;常见问题&#34;&gt;常见问题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;AndroidInjector.Factory is intended to be a stateless interface so that implementors don’t have to worry about managing state related to the object which will be injected. When DispatchingAndroidInjector requests a AndroidInjector.Factory, it does so through a Provider so that it doesn’t explicitly retain any instances of the factory. Because the AndroidInjector.Builder implementation that is generated by Dagger does retain an instance of the Activity/Fragment/etc that is being injected, it is a compile-time error to apply a scope to the methods which provide them. If you are positive that your AndroidInjector.Factory does not retain an instance to the injected object, you may suppress this error by applying @SuppressWarnings(&amp;ldquo;dagger.android.ScopedInjectoryFactory&amp;rdquo;) to your module method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AndroidInjector.Factory旨在成为无状态接口，以便实现者不必担心管理与将被注入的对象相关的状态。 当DispatchingAndroidInjector请求一个AndroidInjector.Factory时，它通过一个Provider来这样做，以便它不明确地保留工厂的任何实例。 由于由Dagger生成的AndroidInjector.Builder实现确实保留了正在被注入的Activity / Fragment /等的实例，因此将范围应用于提供它们的方法时发生编译时错误。 如果你肯定你的AndroidInjector.Factory没有为注入对象保留一个实例，你可以通过在模块方法中应用@SuppressWarnings（“dagger.android.ScopedInjectoryFactory”）来消除这个错误。&lt;/p&gt;
&lt;h3 id=&#34;有用链接&#34;&gt;有用链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@iammert/new-android-injector-with-dagger-2-part-1-8baa60152abe&#34;&gt;New Android Injector with Dagger 2 — part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;- https://malinkang.cn/posts/dagger-android/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>实现navigation</title>
        <link>https://malinkang.cn/posts/navigation-implementing/</link>
        <pubDate>Thu, 07 Jun 2018 16:13:46 +0000</pubDate>
        
        <guid>https://malinkang.cn/posts/navigation-implementing/</guid>
        <description>Malinkang‘s Blog https://malinkang.cn/posts/navigation-implementing/ -&lt;p&gt;导航体系结构组件简化了应用程序中目标之间导航的实现。目的地是应用中的特定屏幕。默认情况下，导航体系结构组件包括支持&lt;code&gt;fragment&lt;/code&gt;和&lt;code&gt;activity&lt;/code&gt;作为目标，但您也可以添加对新类型目标的支持。一组目的地组成一个应用程序的“导航图”。&lt;/p&gt;
&lt;p&gt;除目的地之外，导航图在目标之间具有称为“操作”的连接。图1显示了包含6个目的地的示例应用程序的导航图的直观表示，该应用程序由5个操作连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malinkang.cn/images/navigation-graph.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;在项目中设置navigation&#34;&gt;在项目中设置navigation&lt;/h3&gt;
&lt;p&gt;在您创建导航图之前，您必须为您的项目设置导航结构组件。要在&lt;code&gt;Android Studio&lt;/code&gt;中设置您的项目，请执行以下步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;navigation&lt;/code&gt;组件添加到您的应用程序或模块的&lt;code&gt;build.gradle&lt;/code&gt;文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; nav_version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0-alpha01&amp;#34;&lt;/span&gt;

    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.arch.navigation:navigation-fragment:$nav_version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// use -ktx for Kotlin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.arch.navigation:navigation-ui:$nav_version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// use -ktx for Kotlin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// optional - Test helpers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    androidTestImplementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.arch.navigation:navigation-testing:$nav_version&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// use -ktx for Kotlin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;Project&lt;/code&gt;窗口中，右键单击&lt;code&gt;res&lt;/code&gt;目录并选择&lt;code&gt;New&amp;gt; Android&lt;/code&gt;资源文件。出现新资源对话框。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在“文件名”字段中输入名称，例如“nav_graph”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从资源类型下拉列表中选择&lt;code&gt;Navigation&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击确定。发生以下情况：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;导航资源目录在res目录中创建。&lt;/li&gt;
&lt;li&gt;nav_graph.xml文件在导航目录中创建。&lt;/li&gt;
&lt;li&gt;nav_graph.xml文件将在导航编辑器中打开。这个XML文件包含您的导航图。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;点击文本标签切换到XML文本视图。空导航图的XML如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;navigation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/navigation&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;点击设计返回导航编辑器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;浏览导航编辑器&#34;&gt;浏览导航编辑器&lt;/h3&gt;
&lt;p&gt;在导航编辑器中，您可以快速构建导航图，而无需手动构建图形的XML。如图2所示，导航编辑器有三个部分：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malinkang.cn/images/navigation-editor.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;导航编辑器的部分是：&lt;/p&gt;
&lt;p&gt;①目的地列表 - 列出当前在图表编辑器中的所有目的地。&lt;/p&gt;
&lt;p&gt;②图表编辑器 - 包含您的导航图的可视化表示。&lt;/p&gt;
&lt;p&gt;③属性编辑器 - 包含与导航图中的目的地和动作相关的属性。&lt;/p&gt;
&lt;h3 id=&#34;识别目的地&#34;&gt;识别目的地&lt;/h3&gt;
&lt;p&gt;创建导航图的第一步是确定您的应用的目的地。您可以在现有项目中创建空白目的地或创建&lt;code&gt;fragment&lt;/code&gt;和&lt;code&gt;activity&lt;/code&gt;的目的地。&lt;/p&gt;
&lt;p&gt;要识别您的应用的目标，请使用以下步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在图表编辑器中，单击新建目标。出现新目标对话框。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击创建空白目的地或点击&lt;code&gt;fragment&lt;/code&gt;或&lt;code&gt;activity&lt;/code&gt;。出现新的&lt;code&gt;Android&lt;/code&gt;组件对话框。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;Fragment Name&lt;/code&gt;字段中输入一个名称。这个名字是片段类的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;Fragment Layout Name&lt;/code&gt;字段中输入名称。该名称是该片段的布局文件的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击完成。代表目标的框出现在图形编辑器和目标列表中。发生以下情况：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;如果您创建了空白目的地，图表编辑器会在目的地显示消息“Hello blank fragment”。如果您单击片段或活动，图表编辑器会显示该活动或片段的布局预览。&lt;/li&gt;
&lt;li&gt;为您的项目创建一个Fragment子类。该课程具有您在第3步中分配的名称。&lt;/li&gt;
&lt;li&gt;资源文件是为您的项目创建的。该文件具有您在步骤4中分配的名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://malinkang.cn/images/navigation-newexisting.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;6.点击新插入的目的地以突出显示目的地。以下属性出现在“属性”面板中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型字段包含“Fragment”或“Activity”，用于指示目标是否作为源代码中的片段或活动实现。&lt;/li&gt;
&lt;li&gt;标签字段包含目标的XML布局文件的名称。&lt;/li&gt;
&lt;li&gt;ID字段包含将用于引用代码中的目的地的目的地的ID。&lt;/li&gt;
&lt;li&gt;类字段包含目标的类的名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击文本标签切换到XML视图。 XML现在包含基于现有类和布局文件的名称的id，名称（类名称），标签和布局属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;navigation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:startDestination=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/blankFragment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/blankFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.cashdog.cashdog.BlankFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blank&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_blank&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/navigation&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;连接目的地&#34;&gt;连接目的地&lt;/h3&gt;
&lt;p&gt;您必须有多个目的地才能连接目的地。以下是带有两个空白目标的导航图的XML：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;navigation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:startDestination=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/blankFragment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/blankFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.cashdog.cashdog.BlankFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment_blank&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_blank&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/blankFragment2&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.cashdog.cashdog.BlankFragment2&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blank2&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_blank_fragment2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/navigation&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目的地使用&lt;code&gt;action&lt;/code&gt;连接。连接两个目的地：&lt;/p&gt;
&lt;p&gt;从图形编辑器中，将光标悬停在您希望用户从中导航的目标的右侧。目的地上会出现一个圆圈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malinkang.cn/images/navigation-actioncircle.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;单击并按住，将光标拖到您希望用户导航到的目标上，然后释放。绘制一条线以指示两个目的地之间的导航。&lt;/p&gt;
&lt;p&gt;3.点击箭头突出显示该操作。以下属性出现在“属性”面板中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型字段包含“Action”。&lt;/li&gt;
&lt;li&gt;ID字段包含为&lt;code&gt;action&lt;/code&gt;系统分配的ID。&lt;/li&gt;
&lt;li&gt;目标字段包含目标&lt;code&gt;fragment&lt;/code&gt;或&lt;code&gt;activity&lt;/code&gt;的ID。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.点击文本标签切换到XML视图。操作元素已添加到父目标。该操作具有系统分配的ID和目标属性，其中包含下一个目标的ID。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;navigation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;app:startDestination=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/blankFragment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/blankFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.cashdog.cashdog.BlankFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment_blank&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_blank&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;action&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/action_blankFragment_to_blankFragment2&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;app:destination=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/blankFragment2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fragment&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/blankFragment2&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.cashdog.cashdog.BlankFragment2&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment_blank_fragment2&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_blank_fragment2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/navigation&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;指定一个屏幕作为起始目的地&#34;&gt;指定一个屏幕作为起始目的地&lt;/h3&gt;
&lt;p&gt;图形编辑器会在您的应用中放置第一个目标名称旁边的房屋图标。此图标表示这是导航图中的起始目标。您可以使用以下步骤将另一个目标指定为起始目标：&lt;/p&gt;
&lt;p&gt;5.从图形编辑器中，单击目标。目标被突出显示。&lt;/p&gt;
&lt;p&gt;6.在“属性”面板中单击&lt;code&gt;Click Set Start Destination&lt;/code&gt;。目标现在是开始目标。&lt;/p&gt;
&lt;h3 id=&#34;修改一个activity去持有navigation&#34;&gt;修改一个Activity去持有navigation&lt;/h3&gt;
&lt;p&gt;一个&lt;code&gt;activity&lt;/code&gt;通过将一个&lt;code&gt;NavHost&lt;/code&gt;实现添加到你的&lt;code&gt;activity&lt;/code&gt;的布局中为app持有&lt;code&gt;navigation&lt;/code&gt;。&lt;code&gt;NavHost&lt;/code&gt;是一个空白的视图，当用户在您的应用中导航时，目的地被换入和换出。&lt;/p&gt;
&lt;p&gt;导航体系结构组件的默认&lt;code&gt;NavHost&lt;/code&gt;实现是&lt;code&gt;NavHostFragment&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在包含&lt;code&gt;NavHost&lt;/code&gt;后，必须使用&lt;code&gt;navGraph&lt;/code&gt;属性将导航图与&lt;code&gt;NavHostFragment&lt;/code&gt;关联起来。以下&lt;code&gt;fragment&lt;/code&gt;显示了如何在活动的布局文件中包含&lt;code&gt;NavHostFragment&lt;/code&gt;并将导航图与&lt;code&gt;NavHostFragment&lt;/code&gt;相关联：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;android.support.constraint.ConstraintLayout&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:app=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:tools=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:context=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.MainActivity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/my_nav_host_fragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;androidx.navigation.fragment.NavHostFragment&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;app:navGraph=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@navigation/nav_graph&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;app:defaultNavHost=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/android.support.constraint.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面的示例包含一个应用程序：&lt;code&gt;defaultNavHost =“true”&lt;/code&gt;属性。该属性可确保您的&lt;code&gt;NavHostFragment&lt;/code&gt;拦截系统后退按钮。您还将覆盖&lt;code&gt;AppCompatActivity.onSupportNavigateUp()&lt;/code&gt;并调用&lt;code&gt;NavController.navigateUp&lt;/code&gt;，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onSupportNavigateUp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Navigation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findNavController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nav_host_fragment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;navigateUp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将目标绑定到ui小部件&#34;&gt;将目标绑定到UI小部件&lt;/h3&gt;
&lt;p&gt;导航到目的地是使用&lt;code&gt;NavController&lt;/code&gt;类完成的。可以使用以下静态方法之一来获取&lt;code&gt;NavController&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NavHostFragment.findNavController(Fragment)&lt;/li&gt;
&lt;li&gt;Navigation.findNavController(Activity, @IdRes int viewId)&lt;/li&gt;
&lt;li&gt;Navigation.findNavController(View)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在您获取&lt;code&gt;NavController&lt;/code&gt;后，使用其&lt;code&gt;navigate()&lt;/code&gt;方法导航到目标。 &lt;code&gt;navigate()&lt;/code&gt;方法接受资源ID。该ID可以是导航图形或动作中特定目的地的ID。使用操作的ID而不是目标的资源ID具有优势，例如将过渡与导航关联。有关转场的更多信息，请参阅在目的地之间创建转场。&lt;/p&gt;
&lt;p&gt;以下代码片段显示了如何导航到&lt;code&gt;ViewTransactionsFragment&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;viewTransactionsButton&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View view&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Navigation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findNavController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;view&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;navigate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;viewTransactionsAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Android系统维护一个包含上次访问目标的后台堆栈。当用户打开应用程序时，应用程序的第一个目标位于堆栈上。每次调用&lt;code&gt;navigate()&lt;/code&gt;方法时，都会在堆栈顶部放置另一个目标。相反，按“上”或“后”按钮分别调用&lt;code&gt;NavController.navigateUp()&lt;/code&gt;和&lt;code&gt;NavController.popBackStack()&lt;/code&gt;方法，以将顶层目标弹出堆栈。&lt;/p&gt;
&lt;p&gt;对于按钮，还可以使用&lt;code&gt;Navigation&lt;/code&gt;类的&lt;code&gt;createNavigateOnClickListener()&lt;/code&gt;便捷方法导航到目标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;button&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Navigation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createNavigateOnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next_fragment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;将目标绑定到菜单驱动的ui组件&#34;&gt;将目标绑定到菜单驱动的UI组件&lt;/h4&gt;
&lt;p&gt;您可以使用目标的id作为XML中导航抽屉或溢出菜单项的相同ID，将目标绑定到导航抽屉和溢出菜单。以下代码片段显示了其详细信息屏幕目标，其ID为&lt;code&gt;details_page_fragment&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/details_page_fragment&amp;#34;&lt;/span&gt;
     &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/details&amp;#34;&lt;/span&gt;
     &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.android.myapp.DetailsFragment&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对目的地和菜单项使用相同的ID会自动将目的地与菜单项相关联。以下XML显示了如何将片段目标与导航抽屉中的菜单项相关联（例如，menu_nav_drawer.xml）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;item&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/details_page_fragment&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:icon=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@drawable/ic_details&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:title=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/details&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下XML显示了如何将详细信息目标绑定到溢出菜单（例如menu_overflow.xml）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;item&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@id/details_page_fragment&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:icon=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@drawable/ic_details&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:title=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/details&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;android:menuCategory:&amp;#34;secondary&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;导航体系结构组件包含一个&lt;code&gt;NavigationUI&lt;/code&gt;类。这个类有几个静态方法，你可以使用连接菜单项和导航目的地。例如，以下代码显示如何使用&lt;code&gt;setupWithNavController()&lt;/code&gt;方法将菜单抽屉中的项目连接到&lt;code&gt;NavigationView&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;NavigationView navigationView &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NavigationView&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nav_view&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
NavigationUI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setupWithNavController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;navigationView&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; navController&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有必要使用这些&lt;code&gt;NavigationUI&lt;/code&gt;方法设置菜单驱动的导航组件，以便这些UI元素的状态与对&lt;code&gt;NavController&lt;/code&gt;的更改保持同步。&lt;/p&gt;
&lt;h3 id=&#34;在目标之间传递数据&#34;&gt;在目标之间传递数据&lt;/h3&gt;
&lt;p&gt;您可以通过两种方式在目标之间传递数据：使用&lt;code&gt;Bundle&lt;/code&gt;对象或使用&lt;code&gt;safeargs Gradle插件&lt;/code&gt;以类型安全的方式传递数据。使用以下步骤使用&lt;code&gt;Bundle&lt;/code&gt;对象在目标之间传递数据。如果您使用的是Gradle，请考虑按照类型安全的方式在目标之间传递数据中的说明。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从&lt;code&gt;Graph Editor&lt;/code&gt;中，单击接受参数的目标。目标亮点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单击“属性”面板的“参数”部分中的添加（+）。出现空名称和默认值字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击名称并输入参数的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按Tab并输入参数的默认值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击此目的地之前的操作。参数默认值应包含您新添加的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击文本标签切换到XML视图。具有&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;defaultValue&lt;/code&gt;属性的参数元素已添加到目标中：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/confirmationFragment&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.cashdog.cashdog.ConfirmationFragment&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment_confirmation&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_confirmation&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;argument&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:defaultValue=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”0”&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;7.在您的代码中，使用&lt;code&gt;navigate()&lt;/code&gt;法创建一个包并将其传递到目标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Bundle bundle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Bundle&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
bundle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; amount&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
Navigation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findNavController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;view&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;navigate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;confirmationAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; bundle&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在您的接收目标的代码中，使用&lt;code&gt;getArguments()&lt;/code&gt;方法检索捆绑并使用其内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;TextView tv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; view&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;textViewAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
tv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;getArguments&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;以类型安全的方式在目标之间传递数据&#34;&gt;以类型安全的方式在目标之间传递数据&lt;/h3&gt;
&lt;p&gt;导航架构组件有一个名为&lt;code&gt;safeargs&lt;/code&gt;的&lt;code&gt;Gradle&lt;/code&gt;插件，它生成简单的对象和构建器类，以便对目标和动作指定的参数进行类型安全访问。安全参数建立在&lt;code&gt;Bundle&lt;/code&gt;方法的基础上，但需要一些额外的代码来换取更多的类型安全。如果您使用&lt;code&gt;Gradle&lt;/code&gt;，则可以使用安全参数插件。要添加此插件，请将&amp;rsquo;androidx.navigation.safeargs&amp;rsquo;插件添加到您的&lt;code&gt;build.gradle&lt;/code&gt;文件中。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.android.application&amp;#39;&lt;/span&gt;
apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;androidx.navigation.safeargs&amp;#39;&lt;/span&gt;

android &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在配置了Gradle插件之后，请按照以下步骤使用类型安全的参数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从Graph Editor中，单击收到参数的目标。目标高亮。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在“属性”面板的“参数”部分中单击+。出现空名称和默认值字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击名称并输入参数的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按Tab键并从下拉列表中选择参数的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按Tab并输入参数的默认值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击此目的地之前的操作。参数默认值应包含您新添加的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击文本标签切换到XML视图。具有&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;defaultValue&lt;/code&gt;属性的参数元素已添加到目标中：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fragment&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/confirmationFragment&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.buybuddy.buybuddy.ConfirmationFragment&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fragment_confirmation&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;tools:layout=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@layout/fragment_confirmation&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;argument&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:defaultValue=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app:type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fragment&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当您使用&lt;code&gt;safeargs&lt;/code&gt;插件生成代码时，会为动作和发送和接收目标创建简单的对象和构建器类。这些类是：一个动作发源地的类，附加单词“Directions”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因此，如果源片段的标题为&lt;code&gt;SpecifyAmountFragment&lt;/code&gt;，则生成的类称为&lt;code&gt;SpecifyAmountFragmentDirections&lt;/code&gt;。这个类有一个方法，以用于传递参数的动作命名，以捆绑参数，如&lt;code&gt;confirmationAction()&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个内部类，其名称基于用于传递参数的操作。如果传递操作称为&lt;code&gt;confirmationAction&lt;/code&gt;，则该类将被命名为&lt;code&gt;ConfirmationAction&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递参数的目的地的类，附带单词Args。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，如果目标片段的标题为&lt;code&gt;ConfirmationFragment&lt;/code&gt;，则生成的类将称为ConfirmationFragmentArgs。使用此类的&lt;code&gt;fromBundle()&lt;/code&gt;方法来检索参数。&lt;/p&gt;
&lt;p&gt;以下代码显示如何使用这些方法来设置参数并将其传递给&lt;code&gt;navigate()&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View view&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   EditText amountTv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EditText&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; getView&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;editTextAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; amount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;amountTv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
   ConfirmationAction action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
           SpecifyAmountFragmentDirections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;confirmationAction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
   action&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;amount&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   Navigation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findNavController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;view&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;navigate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;action&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在您的接收目标的代码中，使用&lt;code&gt;getArguments()&lt;/code&gt;法检索捆绑并使用其内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onViewCreated&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View view&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Nullable&lt;/span&gt; Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    TextView tv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; view&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;textViewAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; amount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConfirmationFragmentArgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fromBundle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;getArguments&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAmount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    tv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;amount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将目的地组合到一个嵌套的导航图中&#34;&gt;将目的地组合到一个嵌套的导航图中&lt;/h3&gt;
&lt;p&gt;一系列目的地可以在导航图中组成一个子图。子图称为“嵌套图”，而包含的图称为“根图”。嵌套图有助于组织和重用应用程序UI的部分，如单独的登录流。&lt;/p&gt;
&lt;p&gt;与根图一样，嵌套图必须将目标标识为起始目标。嵌套图封装其目的地;嵌套图形之外的目标（例如根图形上的目标）仅通过其起始目标访问嵌套图形。图6显示了简单转账应用程序的导航图。此图有两个流程：允许用户发送资金的流程和允许用户查看其余额的流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://malinkang.cn/images/navigation-pre-nestedgraph.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;- https://malinkang.cn/posts/navigation-implementing/ - This is a customized copyright.</description>
        </item>
    
    
  </channel>
</rss> 