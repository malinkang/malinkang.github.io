<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>深入理解JVM on 人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。</title>
    <link>https://malinkang.cn/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm/</link>
    <description>Recent content in 深入理解JVM on 人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Sep 2016 09:09:28 +0000</lastBuildDate><atom:link href="https://malinkang.cn/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《深入理解JVM》第13章线程安全和锁优化</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-thread-safe-and-lock-optimization/</link>
      <pubDate>Sat, 17 Sep 2016 09:09:28 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-thread-safe-and-lock-optimization/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《深入理解Java虚拟机》第12章内存模型与线程</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-java-memory-model-and-thread/</link>
      <pubDate>Sat, 10 Sep 2016 09:09:28 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-java-memory-model-and-thread/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《深入理解JVM》第10章编译期优化</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-compilation-optimization/</link>
      <pubDate>Sat, 03 Sep 2016 09:09:28 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-compilation-optimization/</guid>
      <description>第10章 Java内存区域与内存溢出 10.1 概述 10.2 Javac编译器 10.2.1 Javac的源码与调试 从Sun Javac的代码来看，编译过程大致可以分为3个过程</description>
    </item>
    
    <item>
      <title>《深入理解JVM》第7章类加载器</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-class-loader/</link>
      <pubDate>Sat, 27 Aug 2016 13:39:36 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-class-loader/</guid>
      <description>&lt;p&gt;一个完整的 Java 程序是由多个 .class 文件组成的，在程序运行过程中，需要将这些 .class 文件加载到 JVM 中才可以使用。而负责加载这些 .class 文件的就是类加载器（ClassLoader）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入理解JVM》第6章类文件结构</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-class-file-structure/</link>
      <pubDate>Sat, 20 Aug 2016 13:39:36 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-class-file-structure/</guid>
      <description>&lt;p&gt;Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8位字节进行存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入理解JVM》第3章垃圾收集器</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-garbage-collection/</link>
      <pubDate>Sat, 13 Aug 2016 13:39:36 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-garbage-collection/</guid>
      <description>&lt;p&gt;垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《深入理解JVM》第2章Java运行时数据区</title>
      <link>https://malinkang.cn/post/understanding-the-jvm-runtime-data-areas/</link>
      <pubDate>Sat, 06 Aug 2016 13:39:36 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/understanding-the-jvm-runtime-data-areas/</guid>
      <description>&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如图所示。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
