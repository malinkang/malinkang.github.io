<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on 人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。</title>
    <link>https://malinkang.cn/tags/kotlin/</link>
    <description>Recent content in Kotlin on 人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Sep 2018 12:26:55 +0000</lastBuildDate>
    
	<atom:link href="https://malinkang.cn/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《Kotlin实战》读书笔记 第8章 Lambda作为形参和返回值</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter8/</link>
      <pubDate>Wed, 12 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter8/</guid>
      <description>8.1 声明高阶函数 高阶函数就是以另一个函数作为参数或者返回值的函数。 8.1.1 函数类型 1 2 3 4 5 6 7 8 val sum = { x: Int, y: Int -&amp;gt; x + y } val action = { println(42)} run { println(sum(1,2)) //3 } run{ action()</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第7章 运算符重载及其他约定</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter7/</link>
      <pubDate>Sun, 09 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter7/</guid>
      <description>7.1 重载算术运算符 7.1.1 重载二元算术运算 1 2 3 4 5 6 7 8 data class Point(val x: Int, val y: Int) { operator fun plus(other: Point): Point { return Point(x + other.x, y + other.y) } } val p1 = Point(10, 20) val p2 = Point(30, 40) println(p1 + p2) //Point(x=40, y=60) {% code-tabs %} {% code-tabs-item t</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第6章 Kotlin的类型系统</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter6/</link>
      <pubDate>Thu, 06 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter6/</guid>
      <description>6.1 可空性 6.1.1 可空类型 1 2 //增加了null检查后，这段代码就可以编译了 fun strLenSafe(s: String?) = if (s != null) s.length else 0 6.1.2 类型的含义 6.1.3 安全调用运算符 安全调用运算符?允许把</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第5章 Lambda编程</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter5/</link>
      <pubDate>Tue, 04 Sep 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter5/</guid>
      <description>5.1 Lambda表达式和成员引用 5.1.1 Lambda简介：作为函数参数的代码块 1 2 3 4 5 6 button.setOnClickLisener(new OnClickListener(){ @Override public void onClick(View view){ //点击后执行的动作 } } 1 button.se</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第4章 类对象和接口</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter4/</link>
      <pubDate>Tue, 28 Aug 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter4/</guid>
      <description>4.1 定义类继承结构 4.1.1 Kotlin中的接口 1 2 3 4 5 6 7 8 //接口定义 interface Clickable { fun click() } //实现接口 class Button:Clickable{ override fun click() = println(&amp;#34;I was clicked&amp;#34;) } 接口的方法可以有一个默认实现。</description>
    </item>
    
    <item>
      <title>《Kotlin实战》读书笔记 第3章 函数的定义与调用</title>
      <link>https://malinkang.cn/post/kotlin-in-action-chapter3/</link>
      <pubDate>Sat, 25 Aug 2018 12:26:55 +0000</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-in-action-chapter3/</guid>
      <description>3.1 在kotlin中创建集合 1 2 3 4 5 6 7 val set = hashSetOf(1, 7, 53) val list = arrayListOf(1, 7, 53) val map = hashMapOf(1 to &amp;#34;one&amp;#34;, 7 to &amp;#34;seven&amp;#34;, 53 to &amp;#34;fifty-three&amp;#34;) //kotlin的javaClass等价于Java的</description>
    </item>
    
    <item>
      <title>Kotlin作用域函数</title>
      <link>https://malinkang.cn/post/kotlin-scope-functions/</link>
      <pubDate>Fri, 27 Jul 2018 15:05:51 +0800</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-scope-functions/</guid>
      <description>&lt;p&gt;&lt;code&gt;Kotlin&lt;/code&gt;标准库包含几个函数，它们的唯一目的是在对象的上下文中执行代码块。当对一个对象调用这样的函数并提供一个&lt;code&gt;lambda&lt;/code&gt;表达式时，它会形成一个临时作用域。在此作用域中，可以访问该对象而无需其名称。这些函数称为作用域函数。共有以下五种：&lt;code&gt;let&lt;/code&gt;、&lt;code&gt;run&lt;/code&gt;、&lt;code&gt;with&lt;/code&gt;、&lt;code&gt;apply&lt;/code&gt; 以及&lt;code&gt;also&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些函数基本上做了同样的事情：在一个对象上执行一个代码块。不同的是这个对象在块中如何使用，以及整个表达式的结果是什么。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kotlin函数</title>
      <link>https://malinkang.cn/post/kotlin-functions/</link>
      <pubDate>Fri, 27 Jul 2018 15:05:51 +0800</pubDate>
      
      <guid>https://malinkang.cn/post/kotlin-functions/</guid>
      <description>函数声明 Kotlin中的函数使用fun关键字声明： 1 2 3 fun double(x: Int): Int { return 2 * x } 函数调用 调用函数使用传统的方法： 1 val result = double(2) 调用成员函数使用点表示</description>
    </item>
    
  </channel>
</rss>